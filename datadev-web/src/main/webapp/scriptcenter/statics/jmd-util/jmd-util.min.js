(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
        typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.JmdUtil = {}));
}(this, (function (exports) { 'use strict';

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, basedir, module) {
        return module = {
            path: basedir,
            exports: {},
            require: function (path, base) {
                return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
            }
        }, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
        throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var check = function (it) {
        return it && it.Math == Math && it;
    };

    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global_1 =
        // eslint-disable-next-line es/no-global-this -- safe
        check(typeof globalThis == 'object' && globalThis) ||
        check(typeof window == 'object' && window) ||
        // eslint-disable-next-line no-restricted-globals -- safe
        check(typeof self == 'object' && self) ||
        check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
        // eslint-disable-next-line no-new-func -- fallback
        (function () { return this; })() || Function('return this')();

    var fails = function (exec) {
        try {
            return !!exec();
        } catch (error) {
            return true;
        }
    };

    // Detect IE8's incomplete defineProperty implementation
    var descriptors = !fails(function () {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
    });

    var $propertyIsEnumerable$1 = {}.propertyIsEnumerable;
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;

    // Nashorn ~ JDK8 bug
    var NASHORN_BUG = getOwnPropertyDescriptor$2 && !$propertyIsEnumerable$1.call({ 1: 2 }, 1);

    // `Object.prototype.propertyIsEnumerable` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
    var f$7 = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor$2(this, V);
        return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable$1;

    var objectPropertyIsEnumerable = {
        f: f$7
    };

    var createPropertyDescriptor = function (bitmap, value) {
        return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
        };
    };

    var toString$1 = {}.toString;

    var classofRaw = function (it) {
        return toString$1.call(it).slice(8, -1);
    };

    var split = ''.split;

    // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var indexedObject = fails(function () {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins -- safe
        return !Object('z').propertyIsEnumerable(0);
    }) ? function (it) {
        return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
    } : Object;

    // `RequireObjectCoercible` abstract operation
    // https://tc39.es/ecma262/#sec-requireobjectcoercible
    var requireObjectCoercible = function (it) {
        if (it == undefined) throw TypeError("Can't call method on " + it);
        return it;
    };

    // toObject with fallback for non-array-like ES3 strings



    var toIndexedObject = function (it) {
        return indexedObject(requireObjectCoercible(it));
    };

    var isObject = function (it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
    };

    // `ToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-toprimitive
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    var toPrimitive = function (input, PREFERRED_STRING) {
        if (!isObject(input)) return input;
        var fn, val;
        if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
        if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        throw TypeError("Can't convert object to primitive value");
    };

    // `ToObject` abstract operation
    // https://tc39.es/ecma262/#sec-toobject
    var toObject = function (argument) {
        return Object(requireObjectCoercible(argument));
    };

    var hasOwnProperty = {}.hasOwnProperty;

    var has$1 = function hasOwn(it, key) {
        return hasOwnProperty.call(toObject(it), key);
    };

    var document$3 = global_1.document;
    // typeof document.createElement is 'object' in old IE
    var EXISTS = isObject(document$3) && isObject(document$3.createElement);

    var documentCreateElement = function (it) {
        return EXISTS ? document$3.createElement(it) : {};
    };

    // Thank's IE8 for his funny defineProperty
    var ie8DomDefine = !descriptors && !fails(function () {
        // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
        return Object.defineProperty(documentCreateElement('div'), 'a', {
            get: function () { return 7; }
        }).a != 7;
    });

    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
    var f$6 = descriptors ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPrimitive(P, true);
        if (ie8DomDefine) try {
            return $getOwnPropertyDescriptor$1(O, P);
        } catch (error) { /* empty */ }
        if (has$1(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
    };

    var objectGetOwnPropertyDescriptor = {
        f: f$6
    };

    var replacement = /#|\.prototype\./;

    var isForced = function (feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true
            : value == NATIVE ? false
                : typeof detection == 'function' ? fails(detection)
                    : !!detection;
    };

    var normalize = isForced.normalize = function (string) {
        return String(string).replace(replacement, '.').toLowerCase();
    };

    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = 'N';
    var POLYFILL = isForced.POLYFILL = 'P';

    var isForced_1 = isForced;

    var path = {};

    var aFunction$1 = function (it) {
        if (typeof it != 'function') {
            throw TypeError(String(it) + ' is not a function');
        } return it;
    };

    // optional / simple context binding
    var functionBindContext = function (fn, that, length) {
        aFunction$1(fn);
        if (that === undefined) return fn;
        switch (length) {
            case 0: return function () {
                return fn.call(that);
            };
            case 1: return function (a) {
                return fn.call(that, a);
            };
            case 2: return function (a, b) {
                return fn.call(that, a, b);
            };
            case 3: return function (a, b, c) {
                return fn.call(that, a, b, c);
            };
        }
        return function (/* ...args */) {
            return fn.apply(that, arguments);
        };
    };

    var anObject = function (it) {
        if (!isObject(it)) {
            throw TypeError(String(it) + ' is not an object');
        } return it;
    };

    // eslint-disable-next-line es/no-object-defineproperty -- safe
    var $defineProperty$1 = Object.defineProperty;

    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    var f$5 = descriptors ? $defineProperty$1 : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (ie8DomDefine) try {
            return $defineProperty$1(O, P, Attributes);
        } catch (error) { /* empty */ }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
    };

    var objectDefineProperty = {
        f: f$5
    };

    var createNonEnumerableProperty = descriptors ? function (object, key, value) {
        return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
    } : function (object, key, value) {
        object[key] = value;
        return object;
    };

    var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






    var wrapConstructor = function (NativeConstructor) {
        var Wrapper = function (a, b, c) {
            if (this instanceof NativeConstructor) {
                switch (arguments.length) {
                    case 0: return new NativeConstructor();
                    case 1: return new NativeConstructor(a);
                    case 2: return new NativeConstructor(a, b);
                } return new NativeConstructor(a, b, c);
            } return NativeConstructor.apply(this, arguments);
        };
        Wrapper.prototype = NativeConstructor.prototype;
        return Wrapper;
    };

    /*
    options.target      - name of the target object
    options.global      - target is the global object
    options.stat        - export as static methods of target
    options.proto       - export as prototype methods of target
    options.real        - real prototype method for the `pure` version
    options.forced      - export even if the native feature is available
    options.bind        - bind methods to the target, required for the `pure` version
    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
    options.sham        - add a flag to not completely full polyfills
    options.enumerable  - export as enumerable property
    options.noTargetGet - prevent calling a getter on target
  */
    var _export = function (options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var PROTO = options.proto;

        var nativeSource = GLOBAL ? global_1 : STATIC ? global_1[TARGET] : (global_1[TARGET] || {}).prototype;

        var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});
        var targetPrototype = target.prototype;

        var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
        var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

        for (key in source) {
            FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
            // contains in native
            USE_NATIVE = !FORCED && nativeSource && has$1(nativeSource, key);

            targetProperty = target[key];

            if (USE_NATIVE) if (options.noTargetGet) {
                descriptor = getOwnPropertyDescriptor$1(nativeSource, key);
                nativeProperty = descriptor && descriptor.value;
            } else nativeProperty = nativeSource[key];

            // export native or implementation
            sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];

            if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;

            // bind timers to global for call from export context
            if (options.bind && USE_NATIVE) resultProperty = functionBindContext(sourceProperty, global_1);
            // wrap global constructors for prevent changs in this version
            else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
            // make static versions for prototype methods
            else if (PROTO && typeof sourceProperty == 'function') resultProperty = functionBindContext(Function.call, sourceProperty);
            // default case
            else resultProperty = sourceProperty;

            // add a flag to not completely full polyfills
            if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {
                createNonEnumerableProperty(resultProperty, 'sham', true);
            }

            target[key] = resultProperty;

            if (PROTO) {
                VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
                if (!has$1(path, VIRTUAL_PROTOTYPE)) {
                    createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
                }
                // export virtual prototype methods
                path[VIRTUAL_PROTOTYPE][key] = sourceProperty;
                // export real prototype methods
                if (options.real && targetPrototype && !targetPrototype[key]) {
                    createNonEnumerableProperty(targetPrototype, key, sourceProperty);
                }
            }
        }
    };

    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    _export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
        defineProperty: objectDefineProperty.f
    });

    var defineProperty_1 = createCommonjsModule(function (module) {
        var Object = path.Object;

        var defineProperty = module.exports = function defineProperty(it, key, desc) {
            return Object.defineProperty(it, key, desc);
        };

        if (Object.defineProperty.sham) defineProperty.sham = true;
    });

    var defineProperty$3 = defineProperty_1;

    var defineProperty$2 = defineProperty$3;

    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;

            defineProperty$2(target, descriptor.key, descriptor);
        }
    }

    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }

    var isPure = true;

    var setGlobal = function (key, value) {
        try {
            createNonEnumerableProperty(global_1, key, value);
        } catch (error) {
            global_1[key] = value;
        } return value;
    };

    var SHARED = '__core-js_shared__';
    var store$1 = global_1[SHARED] || setGlobal(SHARED, {});

    var sharedStore = store$1;

    var shared = createCommonjsModule(function (module) {
        (module.exports = function (key, value) {
            return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
        })('versions', []).push({
            version: '3.12.1',
            mode: 'pure' ,
            copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
        });
    });

    var id = 0;
    var postfix = Math.random();

    var uid = function (key) {
        return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
    };

    var keys$7 = shared('keys');

    var sharedKey = function (key) {
        return keys$7[key] || (keys$7[key] = uid(key));
    };

    var correctPrototypeGetter = !fails(function () {
        function F() { /* empty */ }
        F.prototype.constructor = null;
        // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
        return Object.getPrototypeOf(new F()) !== F.prototype;
    });

    var IE_PROTO$1 = sharedKey('IE_PROTO');
    var ObjectPrototype$1 = Object.prototype;

    // `Object.getPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.getprototypeof
    // eslint-disable-next-line es/no-object-getprototypeof -- safe
    var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
        O = toObject(O);
        if (has$1(O, IE_PROTO$1)) return O[IE_PROTO$1];
        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
            return O.constructor.prototype;
        } return O instanceof Object ? ObjectPrototype$1 : null;
    };

    var aPossiblePrototype = function (it) {
        if (!isObject(it) && it !== null) {
            throw TypeError("Can't set " + String(it) + ' as a prototype');
        } return it;
    };

    /* eslint-disable no-proto -- safe */



    // `Object.setPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.setprototypeof
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    // eslint-disable-next-line es/no-object-setprototypeof -- safe
    var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
            // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
            setter.call(test, []);
            CORRECT_SETTER = test instanceof Array;
        } catch (error) { /* empty */ }
        return function setPrototypeOf(O, proto) {
            anObject(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER) setter.call(O, proto);
            else O.__proto__ = proto;
            return O;
        };
    }() : undefined);

    var ceil = Math.ceil;
    var floor = Math.floor;

    // `ToInteger` abstract operation
    // https://tc39.es/ecma262/#sec-tointeger
    var toInteger = function (argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
    };

    var min$2 = Math.min;

    // `ToLength` abstract operation
    // https://tc39.es/ecma262/#sec-tolength
    var toLength = function (argument) {
        return argument > 0 ? min$2(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
    };

    var max$2 = Math.max;
    var min$1 = Math.min;

    // Helper for a popular repeating case of the spec:
    // Let integer be ? ToInteger(index).
    // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
    var toAbsoluteIndex = function (index, length) {
        var integer = toInteger(index);
        return integer < 0 ? max$2(integer + length, 0) : min$1(integer, length);
    };

    // `Array.prototype.{ indexOf, includes }` methods implementation
    var createMethod$3 = function (IS_INCLUDES) {
        return function ($this, el, fromIndex) {
            var O = toIndexedObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value;
            // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare -- NaN check
            if (IS_INCLUDES && el != el) while (length > index) {
                value = O[index++];
                // eslint-disable-next-line no-self-compare -- NaN check
                if (value != value) return true;
                // Array#indexOf ignores holes, Array#includes - not
            } else for (;length > index; index++) {
                if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
            } return !IS_INCLUDES && -1;
        };
    };

    var arrayIncludes = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod$3(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod$3(false)
    };

    var hiddenKeys$1 = {};

    var indexOf$3 = arrayIncludes.indexOf;


    var objectKeysInternal = function (object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O) !has$1(hiddenKeys$1, key) && has$1(O, key) && result.push(key);
        // Don't enum bug & hidden keys
        while (names.length > i) if (has$1(O, key = names[i++])) {
            ~indexOf$3(result, key) || result.push(key);
        }
        return result;
    };

    // IE8- don't enum bug keys
    var enumBugKeys = [
        'constructor',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'toLocaleString',
        'toString',
        'valueOf'
    ];

    // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    // eslint-disable-next-line es/no-object-keys -- safe
    var objectKeys = Object.keys || function keys(O) {
        return objectKeysInternal(O, enumBugKeys);
    };

    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    // eslint-disable-next-line es/no-object-defineproperties -- safe
    var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
        return O;
    };

    var aFunction = function (variable) {
        return typeof variable == 'function' ? variable : undefined;
    };

    var getBuiltIn = function (namespace, method) {
        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
            : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
    };

    var html = getBuiltIn('document', 'documentElement');

    var GT = '>';
    var LT = '<';
    var PROTOTYPE$1 = 'prototype';
    var SCRIPT = 'script';
    var IE_PROTO = sharedKey('IE_PROTO');

    var EmptyConstructor = function () { /* empty */ };

    var scriptTag = function (content) {
        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
    };

    // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
    var NullProtoObjectViaActiveX = function (activeXDocument) {
        activeXDocument.write(scriptTag(''));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak
        return temp;
    };

    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var NullProtoObjectViaIFrame = function () {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement('iframe');
        var JS = 'java' + SCRIPT + ':';
        var iframeDocument;
        iframe.style.display = 'none';
        html.appendChild(iframe);
        // https://github.com/zloirock/core-js/issues/475
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag('document.F=Object'));
        iframeDocument.close();
        return iframeDocument.F;
    };

    // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    // avoid IE GC bug
    var activeXDocument;
    var NullProtoObject = function () {
        try {
            /* global ActiveXObject -- old IE */
            activeXDocument = document.domain && new ActiveXObject('htmlfile');
        } catch (error) { /* ignore */ }
        NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
        var length = enumBugKeys.length;
        while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys[length]];
        return NullProtoObject();
    };

    hiddenKeys$1[IE_PROTO] = true;

    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    var objectCreate = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
            EmptyConstructor[PROTOTYPE$1] = anObject(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE$1] = null;
            // add "__proto__" for Object.getPrototypeOf polyfill
            result[IE_PROTO] = O;
        } else result = NullProtoObject();
        return Properties === undefined ? result : objectDefineProperties(result, Properties);
    };

    var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

    var process$4 = global_1.process;
    var versions = process$4 && process$4.versions;
    var v8 = versions && versions.v8;
    var match, version;

    if (v8) {
        match = v8.split('.');
        version = match[0] < 4 ? 1 : match[0] + match[1];
    } else if (engineUserAgent) {
        match = engineUserAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
            match = engineUserAgent.match(/Chrome\/(\d+)/);
            if (match) version = match[1];
        }
    }

    var engineV8Version = version && +version;

    /* eslint-disable es/no-symbol -- required for testing */



    // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
    var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
        return !String(Symbol()) ||
            // Chrome 38 Symbol has incorrect toString conversion
            // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
            !Symbol.sham && engineV8Version && engineV8Version < 41;
    });

    /* eslint-disable es/no-symbol -- required for testing */


    var useSymbolAsUid = nativeSymbol
        && !Symbol.sham
        && typeof Symbol.iterator == 'symbol';

    var WellKnownSymbolsStore$1 = shared('wks');
    var Symbol$1 = global_1.Symbol;
    var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

    var wellKnownSymbol = function (name) {
        if (!has$1(WellKnownSymbolsStore$1, name) || !(nativeSymbol || typeof WellKnownSymbolsStore$1[name] == 'string')) {
            if (nativeSymbol && has$1(Symbol$1, name)) {
                WellKnownSymbolsStore$1[name] = Symbol$1[name];
            } else {
                WellKnownSymbolsStore$1[name] = createWellKnownSymbol('Symbol.' + name);
            }
        } return WellKnownSymbolsStore$1[name];
    };

    var iterators = {};

    var ITERATOR$4 = wellKnownSymbol('iterator');
    var ArrayPrototype$b = Array.prototype;

    // check on default Array iterator
    var isArrayIteratorMethod = function (it) {
        return it !== undefined && (iterators.Array === it || ArrayPrototype$b[ITERATOR$4] === it);
    };

    var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
    var test$1 = {};

    test$1[TO_STRING_TAG$3] = 'z';

    var toStringTagSupport = String(test$1) === '[object z]';

    var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
    // ES3 wrong here
    var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

    // fallback for IE11 Script Access Denied error
    var tryGet = function (it, key) {
        try {
            return it[key];
        } catch (error) { /* empty */ }
    };

    // getting tag from ES6+ `Object.prototype.toString`
    var classof = toStringTagSupport ? classofRaw : function (it) {
        var O, tag, result;
        return it === undefined ? 'Undefined' : it === null ? 'Null'
            // @@toStringTag case
            : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$2)) == 'string' ? tag
                // builtinTag case
                : CORRECT_ARGUMENTS ? classofRaw(O)
                    // ES3 arguments fallback
                    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
    };

    var ITERATOR$3 = wellKnownSymbol('iterator');

    var getIteratorMethod$1 = function (it) {
        if (it != undefined) return it[ITERATOR$3]
            || it['@@iterator']
            || iterators[classof(it)];
    };

    var iteratorClose = function (iterator) {
        var returnMethod = iterator['return'];
        if (returnMethod !== undefined) {
            return anObject(returnMethod.call(iterator)).value;
        }
    };

    var Result = function (stopped, result) {
        this.stopped = stopped;
        this.result = result;
    };

    var iterate = function (iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = functionBindContext(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
        var iterator, iterFn, index, length, result, next, step;

        var stop = function (condition) {
            if (iterator) iteratorClose(iterator);
            return new Result(true, condition);
        };

        var callFn = function (value) {
            if (AS_ENTRIES) {
                anObject(value);
                return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
            } return INTERRUPTED ? fn(value, stop) : fn(value);
        };

        if (IS_ITERATOR) {
            iterator = iterable;
        } else {
            iterFn = getIteratorMethod$1(iterable);
            if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
            // optimisation for array iterators
            if (isArrayIteratorMethod(iterFn)) {
                for (index = 0, length = toLength(iterable.length); length > index; index++) {
                    result = callFn(iterable[index]);
                    if (result && result instanceof Result) return result;
                } return new Result(false);
            }
            iterator = iterFn.call(iterable);
        }

        next = iterator.next;
        while (!(step = next.call(iterator)).done) {
            try {
                result = callFn(step.value);
            } catch (error) {
                iteratorClose(iterator);
                throw error;
            }
            if (typeof result == 'object' && result && result instanceof Result) return result;
        } return new Result(false);
    };

    var $AggregateError = function AggregateError(errors, message) {
        var that = this;
        if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);
        if (objectSetPrototypeOf) {
            // eslint-disable-next-line unicorn/error-message -- expected
            that = objectSetPrototypeOf(new Error(undefined), objectGetPrototypeOf(that));
        }
        if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));
        var errorsArray = [];
        iterate(errors, errorsArray.push, { that: errorsArray });
        createNonEnumerableProperty(that, 'errors', errorsArray);
        return that;
    };

    $AggregateError.prototype = objectCreate(Error.prototype, {
        constructor: createPropertyDescriptor(5, $AggregateError),
        message: createPropertyDescriptor(5, ''),
        name: createPropertyDescriptor(5, 'AggregateError')
    });

    // `AggregateError` constructor
    // https://tc39.es/ecma262/#sec-aggregate-error-constructor
    _export({ global: true }, {
        AggregateError: $AggregateError
    });

    var nativePromiseConstructor = global_1.Promise;

    var redefine = function (target, key, value, options) {
        if (options && options.enumerable) target[key] = value;
        else createNonEnumerableProperty(target, key, value);
    };

    var redefineAll = function (target, src, options) {
        for (var key in src) {
            if (options && options.unsafe && target[key]) target[key] = src[key];
            else redefine(target, key, src[key], options);
        } return target;
    };

    // `Object.prototype.toString` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.tostring
    var objectToString = toStringTagSupport ? {}.toString : function toString() {
        return '[object ' + classof(this) + ']';
    };

    var defineProperty$1 = objectDefineProperty.f;





    var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');

    var setToStringTag = function (it, TAG, STATIC, SET_METHOD) {
        if (it) {
            var target = STATIC ? it : it.prototype;
            if (!has$1(target, TO_STRING_TAG$1)) {
                defineProperty$1(target, TO_STRING_TAG$1, { configurable: true, value: TAG });
            }
            if (SET_METHOD && !toStringTagSupport) {
                createNonEnumerableProperty(target, 'toString', objectToString);
            }
        }
    };

    var SPECIES$5 = wellKnownSymbol('species');

    var setSpecies = function (CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = objectDefineProperty.f;

        if (descriptors && Constructor && !Constructor[SPECIES$5]) {
            defineProperty(Constructor, SPECIES$5, {
                configurable: true,
                get: function () { return this; }
            });
        }
    };

    var anInstance = function (it, Constructor, name) {
        if (!(it instanceof Constructor)) {
            throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        } return it;
    };

    var functionToString = Function.toString;

    // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
    if (typeof sharedStore.inspectSource != 'function') {
        sharedStore.inspectSource = function (it) {
            return functionToString.call(it);
        };
    }

    var inspectSource = sharedStore.inspectSource;

    var ITERATOR$2 = wellKnownSymbol('iterator');
    var SAFE_CLOSING = false;

    try {
        var called = 0;
        var iteratorWithReturn = {
            next: function () {
                return { done: !!called++ };
            },
            'return': function () {
                SAFE_CLOSING = true;
            }
        };
        iteratorWithReturn[ITERATOR$2] = function () {
            return this;
        };
        // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
        Array.from(iteratorWithReturn, function () { throw 2; });
    } catch (error) { /* empty */ }

    var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;
        try {
            var object = {};
            object[ITERATOR$2] = function () {
                return {
                    next: function () {
                        return { done: ITERATION_SUPPORT = true };
                    }
                };
            };
            exec(object);
        } catch (error) { /* empty */ }
        return ITERATION_SUPPORT;
    };

    var SPECIES$4 = wellKnownSymbol('species');

    // `SpeciesConstructor` abstract operation
    // https://tc39.es/ecma262/#sec-speciesconstructor
    var speciesConstructor = function (O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === undefined || (S = anObject(C)[SPECIES$4]) == undefined ? defaultConstructor : aFunction$1(S);
    };

    var engineIsIos = /(?:iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

    var engineIsNode = classofRaw(global_1.process) == 'process';

    var location = global_1.location;
    var set$1 = global_1.setImmediate;
    var clear = global_1.clearImmediate;
    var process$3 = global_1.process;
    var MessageChannel = global_1.MessageChannel;
    var Dispatch = global_1.Dispatch;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = 'onreadystatechange';
    var defer, channel, port;

    var run = function (id) {
        // eslint-disable-next-line no-prototype-builtins -- safe
        if (queue.hasOwnProperty(id)) {
            var fn = queue[id];
            delete queue[id];
            fn();
        }
    };

    var runner = function (id) {
        return function () {
            run(id);
        };
    };

    var listener = function (event) {
        run(event.data);
    };

    var post = function (id) {
        // old engines have not location.origin
        global_1.postMessage(id + '', location.protocol + '//' + location.host);
    };

    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if (!set$1 || !clear) {
        set$1 = function setImmediate(fn) {
            var args = [];
            var i = 1;
            while (arguments.length > i) args.push(arguments[i++]);
            queue[++counter] = function () {
                // eslint-disable-next-line no-new-func -- spec requirement
                (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
            };
            defer(counter);
            return counter;
        };
        clear = function clearImmediate(id) {
            delete queue[id];
        };
        // Node.js 0.8-
        if (engineIsNode) {
            defer = function (id) {
                process$3.nextTick(runner(id));
            };
            // Sphere (JS game engine) Dispatch API
        } else if (Dispatch && Dispatch.now) {
            defer = function (id) {
                Dispatch.now(runner(id));
            };
            // Browsers with MessageChannel, includes WebWorkers
            // except iOS - https://github.com/zloirock/core-js/issues/624
        } else if (MessageChannel && !engineIsIos) {
            channel = new MessageChannel();
            port = channel.port2;
            channel.port1.onmessage = listener;
            defer = functionBindContext(port.postMessage, port, 1);
            // Browsers with postMessage, skip WebWorkers
            // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (
            global_1.addEventListener &&
            typeof postMessage == 'function' &&
            !global_1.importScripts &&
            location && location.protocol !== 'file:' &&
            !fails(post)
        ) {
            defer = post;
            global_1.addEventListener('message', listener, false);
            // IE8-
        } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
            defer = function (id) {
                html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
                    html.removeChild(this);
                    run(id);
                };
            };
            // Rest old browsers
        } else {
            defer = function (id) {
                setTimeout(runner(id), 0);
            };
        }
    }

    var task$1 = {
        set: set$1,
        clear: clear
    };

    var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(engineUserAgent);

    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    var macrotask = task$1.set;




    var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
    var document$2 = global_1.document;
    var process$2 = global_1.process;
    var Promise$1 = global_1.Promise;
    // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
    var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global_1, 'queueMicrotask');
    var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

    var flush, head, last, notify$1, toggle, node, promise$3, then;

    // modern engines have queueMicrotask method
    if (!queueMicrotask) {
        flush = function () {
            var parent, fn;
            if (engineIsNode && (parent = process$2.domain)) parent.exit();
            while (head) {
                fn = head.fn;
                head = head.next;
                try {
                    fn();
                } catch (error) {
                    if (head) notify$1();
                    else last = undefined;
                    throw error;
                }
            } last = undefined;
            if (parent) parent.enter();
        };

        // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
        // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
        if (!engineIsIos && !engineIsNode && !engineIsWebosWebkit && MutationObserver && document$2) {
            toggle = true;
            node = document$2.createTextNode('');
            new MutationObserver(flush).observe(node, { characterData: true });
            notify$1 = function () {
                node.data = toggle = !toggle;
            };
            // environments with maybe non-completely correct, but existent Promise
        } else if (Promise$1 && Promise$1.resolve) {
            // Promise.resolve without an argument throws an error in LG WebOS 2
            promise$3 = Promise$1.resolve(undefined);
            // workaround of WebKit ~ iOS Safari 10.1 bug
            promise$3.constructor = Promise$1;
            then = promise$3.then;
            notify$1 = function () {
                then.call(promise$3, flush);
            };
            // Node.js without promises
        } else if (engineIsNode) {
            notify$1 = function () {
                process$2.nextTick(flush);
            };
            // for other environments - macrotask based on:
            // - setImmediate
            // - MessageChannel
            // - window.postMessag
            // - onreadystatechange
            // - setTimeout
        } else {
            notify$1 = function () {
                // strange IE + webpack dev server bug - use .call(global)
                macrotask.call(global_1, flush);
            };
        }
    }

    var microtask = queueMicrotask || function (fn) {
        var task = { fn: fn, next: undefined };
        if (last) last.next = task;
        if (!head) {
            head = task;
            notify$1();
        } last = task;
    };

    var PromiseCapability = function (C) {
        var resolve, reject;
        this.promise = new C(function ($$resolve, $$reject) {
            if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
            resolve = $$resolve;
            reject = $$reject;
        });
        this.resolve = aFunction$1(resolve);
        this.reject = aFunction$1(reject);
    };

    // 25.4.1.5 NewPromiseCapability(C)
    var f$4 = function (C) {
        return new PromiseCapability(C);
    };

    var newPromiseCapability$1 = {
        f: f$4
    };

    var promiseResolve = function (C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability$1.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
    };

    var hostReportErrors = function (a, b) {
        var console = global_1.console;
        if (console && console.error) {
            arguments.length === 1 ? console.error(a) : console.error(a, b);
        }
    };

    var perform = function (exec) {
        try {
            return { error: false, value: exec() };
        } catch (error) {
            return { error: true, value: error };
        }
    };

    var WeakMap$1 = global_1.WeakMap;

    var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(inspectSource(WeakMap$1));

    var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
    var WeakMap = global_1.WeakMap;
    var set, get, has;

    var enforce = function (it) {
        return has(it) ? get(it) : set(it, {});
    };

    var getterFor = function (TYPE) {
        return function (it) {
            var state;
            if (!isObject(it) || (state = get(it)).type !== TYPE) {
                throw TypeError('Incompatible receiver, ' + TYPE + ' required');
            } return state;
        };
    };

    if (nativeWeakMap || sharedStore.state) {
        var store = sharedStore.state || (sharedStore.state = new WeakMap());
        var wmget = store.get;
        var wmhas = store.has;
        var wmset = store.set;
        set = function (it, metadata) {
            if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            wmset.call(store, it, metadata);
            return metadata;
        };
        get = function (it) {
            return wmget.call(store, it) || {};
        };
        has = function (it) {
            return wmhas.call(store, it);
        };
    } else {
        var STATE = sharedKey('state');
        hiddenKeys$1[STATE] = true;
        set = function (it, metadata) {
            if (has$1(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            createNonEnumerableProperty(it, STATE, metadata);
            return metadata;
        };
        get = function (it) {
            return has$1(it, STATE) ? it[STATE] : {};
        };
        has = function (it) {
            return has$1(it, STATE);
        };
    }

    var internalState = {
        set: set,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor
    };

    var engineIsBrowser = typeof window == 'object';

    var task = task$1.set;












    var SPECIES$3 = wellKnownSymbol('species');
    var PROMISE = 'Promise';
    var getInternalState$3 = internalState.get;
    var setInternalState$3 = internalState.set;
    var getInternalPromiseState = internalState.getterFor(PROMISE);
    var NativePromisePrototype = nativePromiseConstructor && nativePromiseConstructor.prototype;
    var PromiseConstructor = nativePromiseConstructor;
    var PromiseConstructorPrototype = NativePromisePrototype;
    var TypeError$1 = global_1.TypeError;
    var document$1 = global_1.document;
    var process$1 = global_1.process;
    var newPromiseCapability = newPromiseCapability$1.f;
    var newGenericPromiseCapability = newPromiseCapability;
    var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global_1.dispatchEvent);
    var NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';
    var UNHANDLED_REJECTION = 'unhandledrejection';
    var REJECTION_HANDLED = 'rejectionhandled';
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;
    var SUBCLASSING = false;
    var Internal, OwnPromiseCapability, PromiseWrapper;

    var FORCED$4 = isForced_1(PROMISE, function () {
        var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
        // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
        // We can't detect it synchronously, so just check versions
        if (!GLOBAL_CORE_JS_PROMISE && engineV8Version === 66) return true;
        // We need Promise#finally in the pure version for preventing prototype pollution
        if (!PromiseConstructorPrototype['finally']) return true;
        // We can't use @@species feature detection in V8 since it causes
        // deoptimization and performance degradation
        // https://github.com/zloirock/core-js/issues/679
        if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
        // Detect correctness of subclassing with @@species support
        var promise = new PromiseConstructor(function (resolve) { resolve(1); });
        var FakePromise = function (exec) {
            exec(function () { /* empty */ }, function () { /* empty */ });
        };
        var constructor = promise.constructor = {};
        constructor[SPECIES$3] = FakePromise;
        SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
        if (!SUBCLASSING) return true;
        // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        return !GLOBAL_CORE_JS_PROMISE && engineIsBrowser && !NATIVE_REJECTION_EVENT;
    });

    var INCORRECT_ITERATION$1 = FORCED$4 || !checkCorrectnessOfIteration(function (iterable) {
        PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
    });

    // helpers
    var isThenable = function (it) {
        var then;
        return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
    };

    var notify = function (state, isReject) {
        if (state.notified) return;
        state.notified = true;
        var chain = state.reactions;
        microtask(function () {
            var value = state.value;
            var ok = state.state == FULFILLED;
            var index = 0;
            // variable length - can't use forEach
            while (chain.length > index) {
                var reaction = chain[index++];
                var handler = ok ? reaction.ok : reaction.fail;
                var resolve = reaction.resolve;
                var reject = reaction.reject;
                var domain = reaction.domain;
                var result, then, exited;
                try {
                    if (handler) {
                        if (!ok) {
                            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
                            state.rejection = HANDLED;
                        }
                        if (handler === true) result = value;
                        else {
                            if (domain) domain.enter();
                            result = handler(value); // can throw
                            if (domain) {
                                domain.exit();
                                exited = true;
                            }
                        }
                        if (result === reaction.promise) {
                            reject(TypeError$1('Promise-chain cycle'));
                        } else if (then = isThenable(result)) {
                            then.call(result, resolve, reject);
                        } else resolve(result);
                    } else reject(value);
                } catch (error) {
                    if (domain && !exited) domain.exit();
                    reject(error);
                }
            }
            state.reactions = [];
            state.notified = false;
            if (isReject && !state.rejection) onUnhandled(state);
        });
    };

    var dispatchEvent = function (name, promise, reason) {
        var event, handler;
        if (DISPATCH_EVENT) {
            event = document$1.createEvent('Event');
            event.promise = promise;
            event.reason = reason;
            event.initEvent(name, false, true);
            global_1.dispatchEvent(event);
        } else event = { promise: promise, reason: reason };
        if (!NATIVE_REJECTION_EVENT && (handler = global_1['on' + name])) handler(event);
        else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
    };

    var onUnhandled = function (state) {
        task.call(global_1, function () {
            var promise = state.facade;
            var value = state.value;
            var IS_UNHANDLED = isUnhandled(state);
            var result;
            if (IS_UNHANDLED) {
                result = perform(function () {
                    if (engineIsNode) {
                        process$1.emit('unhandledRejection', value, promise);
                    } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
                });
                // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                state.rejection = engineIsNode || isUnhandled(state) ? UNHANDLED : HANDLED;
                if (result.error) throw result.value;
            }
        });
    };

    var isUnhandled = function (state) {
        return state.rejection !== HANDLED && !state.parent;
    };

    var onHandleUnhandled = function (state) {
        task.call(global_1, function () {
            var promise = state.facade;
            if (engineIsNode) {
                process$1.emit('rejectionHandled', promise);
            } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
    };

    var bind = function (fn, state, unwrap) {
        return function (value) {
            fn(state, value, unwrap);
        };
    };

    var internalReject = function (state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(state, true);
    };

    var internalResolve = function (state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        try {
            if (state.facade === value) throw TypeError$1("Promise can't be resolved itself");
            var then = isThenable(value);
            if (then) {
                microtask(function () {
                    var wrapper = { done: false };
                    try {
                        then.call(value,
                            bind(internalResolve, wrapper, state),
                            bind(internalReject, wrapper, state)
                        );
                    } catch (error) {
                        internalReject(wrapper, error, state);
                    }
                });
            } else {
                state.value = value;
                state.state = FULFILLED;
                notify(state, false);
            }
        } catch (error) {
            internalReject({ done: false }, error, state);
        }
    };

    // constructor polyfill
    if (FORCED$4) {
        // 25.4.3.1 Promise(executor)
        PromiseConstructor = function Promise(executor) {
            anInstance(this, PromiseConstructor, PROMISE);
            aFunction$1(executor);
            Internal.call(this);
            var state = getInternalState$3(this);
            try {
                executor(bind(internalResolve, state), bind(internalReject, state));
            } catch (error) {
                internalReject(state, error);
            }
        };
        PromiseConstructorPrototype = PromiseConstructor.prototype;
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        Internal = function Promise(executor) {
            setInternalState$3(this, {
                type: PROMISE,
                done: false,
                notified: false,
                parent: false,
                reactions: [],
                rejection: false,
                state: PENDING,
                value: undefined
            });
        };
        Internal.prototype = redefineAll(PromiseConstructorPrototype, {
            // `Promise.prototype.then` method
            // https://tc39.es/ecma262/#sec-promise.prototype.then
            then: function then(onFulfilled, onRejected) {
                var state = getInternalPromiseState(this);
                var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
                reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                reaction.fail = typeof onRejected == 'function' && onRejected;
                reaction.domain = engineIsNode ? process$1.domain : undefined;
                state.parent = true;
                state.reactions.push(reaction);
                if (state.state != PENDING) notify(state, false);
                return reaction.promise;
            },
            // `Promise.prototype.catch` method
            // https://tc39.es/ecma262/#sec-promise.prototype.catch
            'catch': function (onRejected) {
                return this.then(undefined, onRejected);
            }
        });
        OwnPromiseCapability = function () {
            var promise = new Internal();
            var state = getInternalState$3(promise);
            this.promise = promise;
            this.resolve = bind(internalResolve, state);
            this.reject = bind(internalReject, state);
        };
        newPromiseCapability$1.f = newPromiseCapability = function (C) {
            return C === PromiseConstructor || C === PromiseWrapper
                ? new OwnPromiseCapability(C)
                : newGenericPromiseCapability(C);
        };
    }

    _export({ global: true, wrap: true, forced: FORCED$4 }, {
        Promise: PromiseConstructor
    });

    setToStringTag(PromiseConstructor, PROMISE, false, true);
    setSpecies(PROMISE);

    PromiseWrapper = getBuiltIn(PROMISE);

    // statics
    _export({ target: PROMISE, stat: true, forced: FORCED$4 }, {
        // `Promise.reject` method
        // https://tc39.es/ecma262/#sec-promise.reject
        reject: function reject(r) {
            var capability = newPromiseCapability(this);
            capability.reject.call(undefined, r);
            return capability.promise;
        }
    });

    _export({ target: PROMISE, stat: true, forced: isPure  }, {
        // `Promise.resolve` method
        // https://tc39.es/ecma262/#sec-promise.resolve
        resolve: function resolve(x) {
            return promiseResolve(this === PromiseWrapper ? PromiseConstructor : this, x);
        }
    });

    _export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION$1 }, {
        // `Promise.all` method
        // https://tc39.es/ecma262/#sec-promise.all
        all: function all(iterable) {
            var C = this;
            var capability = newPromiseCapability(C);
            var resolve = capability.resolve;
            var reject = capability.reject;
            var result = perform(function () {
                var $promiseResolve = aFunction$1(C.resolve);
                var values = [];
                var counter = 0;
                var remaining = 1;
                iterate(iterable, function (promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    values.push(undefined);
                    remaining++;
                    $promiseResolve.call(C, promise).then(function (value) {
                        if (alreadyCalled) return;
                        alreadyCalled = true;
                        values[index] = value;
                        --remaining || resolve(values);
                    }, reject);
                });
                --remaining || resolve(values);
            });
            if (result.error) reject(result.value);
            return capability.promise;
        },
        // `Promise.race` method
        // https://tc39.es/ecma262/#sec-promise.race
        race: function race(iterable) {
            var C = this;
            var capability = newPromiseCapability(C);
            var reject = capability.reject;
            var result = perform(function () {
                var $promiseResolve = aFunction$1(C.resolve);
                iterate(iterable, function (promise) {
                    $promiseResolve.call(C, promise).then(capability.resolve, reject);
                });
            });
            if (result.error) reject(result.value);
            return capability.promise;
        }
    });

    // `Promise.allSettled` method
    // https://tc39.es/ecma262/#sec-promise.allsettled
    _export({ target: 'Promise', stat: true }, {
        allSettled: function allSettled(iterable) {
            var C = this;
            var capability = newPromiseCapability$1.f(C);
            var resolve = capability.resolve;
            var reject = capability.reject;
            var result = perform(function () {
                var promiseResolve = aFunction$1(C.resolve);
                var values = [];
                var counter = 0;
                var remaining = 1;
                iterate(iterable, function (promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    values.push(undefined);
                    remaining++;
                    promiseResolve.call(C, promise).then(function (value) {
                        if (alreadyCalled) return;
                        alreadyCalled = true;
                        values[index] = { status: 'fulfilled', value: value };
                        --remaining || resolve(values);
                    }, function (error) {
                        if (alreadyCalled) return;
                        alreadyCalled = true;
                        values[index] = { status: 'rejected', reason: error };
                        --remaining || resolve(values);
                    });
                });
                --remaining || resolve(values);
            });
            if (result.error) reject(result.value);
            return capability.promise;
        }
    });

    var PROMISE_ANY_ERROR = 'No one promise resolved';

    // `Promise.any` method
    // https://tc39.es/ecma262/#sec-promise.any
    _export({ target: 'Promise', stat: true }, {
        any: function any(iterable) {
            var C = this;
            var capability = newPromiseCapability$1.f(C);
            var resolve = capability.resolve;
            var reject = capability.reject;
            var result = perform(function () {
                var promiseResolve = aFunction$1(C.resolve);
                var errors = [];
                var counter = 0;
                var remaining = 1;
                var alreadyResolved = false;
                iterate(iterable, function (promise) {
                    var index = counter++;
                    var alreadyRejected = false;
                    errors.push(undefined);
                    remaining++;
                    promiseResolve.call(C, promise).then(function (value) {
                        if (alreadyRejected || alreadyResolved) return;
                        alreadyResolved = true;
                        resolve(value);
                    }, function (error) {
                        if (alreadyRejected || alreadyResolved) return;
                        alreadyRejected = true;
                        errors[index] = error;
                        --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
                    });
                });
                --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
            });
            if (result.error) reject(result.value);
            return capability.promise;
        }
    });

    // Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
    var NON_GENERIC = !!nativePromiseConstructor && fails(function () {
        nativePromiseConstructor.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
    });

    // `Promise.prototype.finally` method
    // https://tc39.es/ecma262/#sec-promise.prototype.finally
    _export({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
        'finally': function (onFinally) {
            var C = speciesConstructor(this, getBuiltIn('Promise'));
            var isFunction = typeof onFinally == 'function';
            return this.then(
                isFunction ? function (x) {
                    return promiseResolve(C, onFinally()).then(function () { return x; });
                } : onFinally,
                isFunction ? function (e) {
                    return promiseResolve(C, onFinally()).then(function () { throw e; });
                } : onFinally
            );
        }
    });

    // `String.prototype.{ codePointAt, at }` methods implementation
    var createMethod$2 = function (CONVERT_TO_STRING) {
        return function ($this, pos) {
            var S = String(requireObjectCoercible($this));
            var position = toInteger(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
            first = S.charCodeAt(position);
            return first < 0xD800 || first > 0xDBFF || position + 1 === size
            || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
                ? CONVERT_TO_STRING ? S.charAt(position) : first
                : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
        };
    };

    var stringMultibyte = {
        // `String.prototype.codePointAt` method
        // https://tc39.es/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod$2(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod$2(true)
    };

    var ITERATOR$1 = wellKnownSymbol('iterator');
    var BUGGY_SAFARI_ITERATORS$1 = false;

    var returnThis$2 = function () { return this; };

    // `%IteratorPrototype%` object
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
    var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

    /* eslint-disable es/no-array-prototype-keys -- safe */
    if ([].keys) {
        arrayIterator = [].keys();
        // Safari 8 has buggy iterators w/o `next`
        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
        else {
            PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
        }
    }

    var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails(function () {
        var test = {};
        // FF44- legacy iterators case
        return IteratorPrototype$2[ITERATOR$1].call(test) !== test;
    });

    if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

    // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    if ((NEW_ITERATOR_PROTOTYPE) && !has$1(IteratorPrototype$2, ITERATOR$1)) {
        createNonEnumerableProperty(IteratorPrototype$2, ITERATOR$1, returnThis$2);
    }

    var iteratorsCore = {
        IteratorPrototype: IteratorPrototype$2,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
    };

    var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





    var returnThis$1 = function () { return this; };

    var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
        var TO_STRING_TAG = NAME + ' Iterator';
        IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        iterators[TO_STRING_TAG] = returnThis$1;
        return IteratorConstructor;
    };

    var IteratorPrototype = iteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = iteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR = wellKnownSymbol('iterator');
    var KEYS = 'keys';
    var VALUES = 'values';
    var ENTRIES = 'entries';

    var returnThis = function () { return this; };

    var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);

        var getIterationMethod = function (KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
            switch (KIND) {
                case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
                case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
                case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
            } return function () { return new IteratorConstructor(this); };
        };

        var TO_STRING_TAG = NAME + ' Iterator';
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR]
            || IterablePrototype['@@iterator']
            || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;

        // fix native
        if (anyNativeIterator) {
            CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
            if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                // Set @@toStringTag to native iterators
                setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                iterators[TO_STRING_TAG] = returnThis;
            }
        }

        // fix Array#{values, @@iterator}.name in V8 / FF
        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() { return nativeIterator.call(this); };
        }

        // define iterator
        if ((FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
            createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
        }
        iterators[NAME] = defaultIterator;

        // export additional methods
        if (DEFAULT) {
            methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES)
            };
            if (FORCED) for (KEY in methods) {
                if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                    redefine(IterablePrototype, KEY, methods[KEY]);
                }
            } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
        }

        return methods;
    };

    var charAt = stringMultibyte.charAt;



    var STRING_ITERATOR = 'String Iterator';
    var setInternalState$2 = internalState.set;
    var getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

    // `String.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-string.prototype-@@iterator
    defineIterator(String, 'String', function (iterated) {
        setInternalState$2(this, {
            type: STRING_ITERATOR,
            string: String(iterated),
            index: 0
        });
        // `%StringIteratorPrototype%.next` method
        // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
    }, function next() {
        var state = getInternalState$2(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return { value: undefined, done: true };
        point = charAt(string, index);
        state.index += point.length;
        return { value: point, done: false };
    });

    var ARRAY_ITERATOR = 'Array Iterator';
    var setInternalState$1 = internalState.set;
    var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

    // `Array.prototype.entries` method
    // https://tc39.es/ecma262/#sec-array.prototype.entries
    // `Array.prototype.keys` method
    // https://tc39.es/ecma262/#sec-array.prototype.keys
    // `Array.prototype.values` method
    // https://tc39.es/ecma262/#sec-array.prototype.values
    // `Array.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
    // `CreateArrayIterator` internal method
    // https://tc39.es/ecma262/#sec-createarrayiterator
    defineIterator(Array, 'Array', function (iterated, kind) {
        setInternalState$1(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject(iterated), // target
            index: 0,                          // next index
            kind: kind                         // kind
        });
        // `%ArrayIteratorPrototype%.next` method
        // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
    }, function () {
        var state = getInternalState$1(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
            state.target = undefined;
            return { value: undefined, done: true };
        }
        if (kind == 'keys') return { value: index, done: false };
        if (kind == 'values') return { value: target[index], done: false };
        return { value: [index, target[index]], done: false };
    }, 'values');

    // argumentsList[@@iterator] is %ArrayProto_values%
    // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
    // https://tc39.es/ecma262/#sec-createmappedargumentsobject
    iterators.Arguments = iterators.Array;

    // iterable DOM collections
    // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
    var domIterables = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    };

    var TO_STRING_TAG = wellKnownSymbol('toStringTag');

    for (var COLLECTION_NAME in domIterables) {
        var Collection = global_1[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;
        if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
        }
        iterators[COLLECTION_NAME] = iterators.Array;
    }

    var promise$2 = path.Promise;

    // `Promise.try` method
    // https://github.com/tc39/proposal-promise-try
    _export({ target: 'Promise', stat: true }, {
        'try': function (callbackfn) {
            var promiseCapability = newPromiseCapability$1.f(this);
            var result = perform(callbackfn);
            (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
            return promiseCapability.promise;
        }
    });

    // TODO: Remove from `core-js@4`




    var promise$1 = promise$2;

    var promise = promise$1;

    var arrayMethodIsStrict = function (METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function () {
            // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
            method.call(null, argument || function () { throw 1; }, 1);
        });
    };

    /* eslint-disable es/no-array-prototype-indexof -- required for testing */

    var $indexOf = arrayIncludes.indexOf;


    var nativeIndexOf = [].indexOf;

    var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
    var STRICT_METHOD$3 = arrayMethodIsStrict('indexOf');

    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    _export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$3 }, {
        indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
            return NEGATIVE_ZERO
                // convert -0 to +0
                ? nativeIndexOf.apply(this, arguments) || 0
                : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var entryVirtual = function (CONSTRUCTOR) {
        return path[CONSTRUCTOR + 'Prototype'];
    };

    var indexOf$2 = entryVirtual('Array').indexOf;

    var ArrayPrototype$a = Array.prototype;

    var indexOf_1 = function (it) {
        var own = it.indexOf;
        return it === ArrayPrototype$a || (it instanceof Array && own === ArrayPrototype$a.indexOf) ? indexOf$2 : own;
    };

    var indexOf$1 = indexOf_1;

    var indexOf = indexOf$1;

    // `IsArray` abstract operation
    // https://tc39.es/ecma262/#sec-isarray
    // eslint-disable-next-line es/no-array-isarray -- safe
    var isArray$3 = Array.isArray || function isArray(arg) {
        return classofRaw(arg) == 'Array';
    };

    var SPECIES$2 = wellKnownSymbol('species');

    // `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesCreate = function (originalArray, length) {
        var C;
        if (isArray$3(originalArray)) {
            C = originalArray.constructor;
            // cross-realm fallback
            if (typeof C == 'function' && (C === Array || isArray$3(C.prototype))) C = undefined;
            else if (isObject(C)) {
                C = C[SPECIES$2];
                if (C === null) C = undefined;
            }
        } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
    };

    var push = [].push;

    // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation
    var createMethod$1 = function (TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_OUT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function ($this, callbackfn, that, specificCreate) {
            var O = toObject($this);
            var self = indexedObject(O);
            var boundFunction = functionBindContext(callbackfn, that, 3);
            var length = toLength(self.length);
            var index = 0;
            var create = specificCreate || arraySpeciesCreate;
            var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
            var value, result;
            for (;length > index; index++) if (NO_HOLES || index in self) {
                value = self[index];
                result = boundFunction(value, index, O);
                if (TYPE) {
                    if (IS_MAP) target[index] = result; // map
                    else if (result) switch (TYPE) {
                        case 3: return true;              // some
                        case 5: return value;             // find
                        case 6: return index;             // findIndex
                        case 2: push.call(target, value); // filter
                    } else switch (TYPE) {
                        case 4: return false;             // every
                        case 7: push.call(target, value); // filterOut
                    }
                }
            }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
    };

    var arrayIteration = {
        // `Array.prototype.forEach` method
        // https://tc39.es/ecma262/#sec-array.prototype.foreach
        forEach: createMethod$1(0),
        // `Array.prototype.map` method
        // https://tc39.es/ecma262/#sec-array.prototype.map
        map: createMethod$1(1),
        // `Array.prototype.filter` method
        // https://tc39.es/ecma262/#sec-array.prototype.filter
        filter: createMethod$1(2),
        // `Array.prototype.some` method
        // https://tc39.es/ecma262/#sec-array.prototype.some
        some: createMethod$1(3),
        // `Array.prototype.every` method
        // https://tc39.es/ecma262/#sec-array.prototype.every
        every: createMethod$1(4),
        // `Array.prototype.find` method
        // https://tc39.es/ecma262/#sec-array.prototype.find
        find: createMethod$1(5),
        // `Array.prototype.findIndex` method
        // https://tc39.es/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod$1(6),
        // `Array.prototype.filterOut` method
        // https://github.com/tc39/proposal-array-filtering
        filterOut: createMethod$1(7)
    };

    var $forEach$1 = arrayIteration.forEach;


    var STRICT_METHOD$2 = arrayMethodIsStrict('forEach');

    // `Array.prototype.forEach` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    var arrayForEach = !STRICT_METHOD$2 ? function forEach(callbackfn /* , thisArg */) {
        return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        // eslint-disable-next-line es/no-array-prototype-foreach -- safe
    } : [].forEach;

    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    // eslint-disable-next-line es/no-array-prototype-foreach -- safe
    _export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
        forEach: arrayForEach
    });

    var forEach$3 = entryVirtual('Array').forEach;

    var forEach$2 = forEach$3;

    var ArrayPrototype$9 = Array.prototype;

    var DOMIterables$1 = {
        DOMTokenList: true,
        NodeList: true
    };

    var forEach_1 = function (it) {
        var own = it.forEach;
        return it === ArrayPrototype$9 || (it instanceof Array && own === ArrayPrototype$9.forEach)
        // eslint-disable-next-line no-prototype-builtins -- safe
        || DOMIterables$1.hasOwnProperty(classof(it)) ? forEach$2 : own;
    };

    var forEach$1 = forEach_1;

    var forEach = forEach$1;

    var $includes = arrayIncludes.includes;


    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    _export({ target: 'Array', proto: true }, {
        includes: function includes(el /* , fromIndex = 0 */) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var includes$4 = entryVirtual('Array').includes;

    var MATCH$1 = wellKnownSymbol('match');

    // `IsRegExp` abstract operation
    // https://tc39.es/ecma262/#sec-isregexp
    var isRegexp = function (it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
    };

    var notARegexp = function (it) {
        if (isRegexp(it)) {
            throw TypeError("The method doesn't accept regular expressions");
        } return it;
    };

    var MATCH = wellKnownSymbol('match');

    var correctIsRegexpLogic = function (METHOD_NAME) {
        var regexp = /./;
        try {
            '/./'[METHOD_NAME](regexp);
        } catch (error1) {
            try {
                regexp[MATCH] = false;
                return '/./'[METHOD_NAME](regexp);
            } catch (error2) { /* empty */ }
        } return false;
    };

    // `String.prototype.includes` method
    // https://tc39.es/ecma262/#sec-string.prototype.includes
    _export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
        includes: function includes(searchString /* , position = 0 */) {
            return !!~String(requireObjectCoercible(this))
                .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var includes$3 = entryVirtual('String').includes;

    var ArrayPrototype$8 = Array.prototype;
    var StringPrototype$1 = String.prototype;

    var includes$2 = function (it) {
        var own = it.includes;
        if (it === ArrayPrototype$8 || (it instanceof Array && own === ArrayPrototype$8.includes)) return includes$4;
        if (typeof it === 'string' || it === StringPrototype$1 || (it instanceof String && own === StringPrototype$1.includes)) {
            return includes$3;
        } return own;
    };

    var includes$1 = includes$2;

    var includes = includes$1;

    var SPECIES$1 = wellKnownSymbol('species');

    var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return engineV8Version >= 51 || !fails(function () {
            var array = [];
            var constructor = array.constructor = {};
            constructor[SPECIES$1] = function () {
                return { foo: 1 };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
        });
    };

    var $filter = arrayIteration.filter;


    var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('filter');

    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    // with adding support of @@species
    _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {
        filter: function filter(callbackfn /* , thisArg */) {
            return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var filter$2 = entryVirtual('Array').filter;

    var ArrayPrototype$7 = Array.prototype;

    var filter_1 = function (it) {
        var own = it.filter;
        return it === ArrayPrototype$7 || (it instanceof Array && own === ArrayPrototype$7.filter) ? filter$2 : own;
    };

    var filter$1 = filter_1;

    var filter = filter$1;

    var FAILS_ON_PRIMITIVES$1 = fails(function () { objectKeys(1); });

    // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    _export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {
        keys: function keys(it) {
            return objectKeys(toObject(it));
        }
    });

    var keys$6 = path.Object.keys;

    var keys$5 = keys$6;

    var keys$4 = keys$5;

    /*
   * @Description: 嵌套表单 操作类
   * @LastEditors: huliang54
   * @LastEditTime: 2021-02-18 12:00:00
   */

    /**
     * 使用方法：
     * 1. 最外层需要先new FormControl对象,并传给需要校验的表单
     * 2. 子层created中 register, destroyed 销毁,注意 不同子表单需要注册不同的name相同name 会覆盖
     * 对外  校验方法  获取表单生成参数方法  初始化方法 对应子表单中 validate(返回promise)  updateParam   initData
     */
    var FormControl = /*#__PURE__*/function () {
        function FormControl() {
            var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            _classCallCheck(this, FormControl);

            this.components = init;
        }
        /**
         * 注册组件
         * @param name 子组件名称
         * @param value 子组件值
         */


        _createClass(FormControl, [{
            key: "register",
            value: function register(name, value) {
                if (!name) {
                    throw new Error('子表单name不能为空');
                }

                this.components[name] = value;
            }
            /**
             * 销毁组件
             * @param name 子组件名称
             */

        }, {
            key: "remove",
            value: function remove(name) {
                if (name in this.components) {
                    delete this.components[name];
                }
            } // 销毁所有组件

        }, {
            key: "removeAll",
            value: function removeAll() {
                this.components = {};
            } // 校验方法

        }, {
            key: "validate",
            value: function validate() {
                var _this = this;

                return new promise(function (resolve, reject) {
                    var validateList = [];

                    for (var k in _this.components) {
                        if (_this.components[k].validate) {
                            validateList.push(_this.components[k].validate());
                        }
                    }

                    promise.all(validateList).then(function (item) {
                        resolve(item);
                    })["catch"](function (err) {
                        reject(new Error(err));
                    });
                });
            }
            /**
             * 获取子组件参数
             * @param name 子组件名称
             * @param resType 返回值类型
             * @param fnName 子组件获取参数的方法名称,默认为updateParam
             * @return {[]}
             */

        }, {
            key: "updateParam",
            value: function updateParam() {
                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                var resType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'array';
                var fnName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'updateParam';
                var res = [];
                var result = {};

                for (var k in this.components) {
                    if (indexOf(k).call(k, name) > -1) {
                        if (this.components[k].updateParam) {
                            var childResult = this.components[k][fnName]();
                            res.push(childResult);
                            result[name] = childResult;
                        }
                    }
                }

                return resType === 'array' ? res : result;
            }
            /**
             * 初始化方法
             * @param param Object[] 初始化参数
             * @param name 子组件名称
             * @param exclude 排除组件名称
             */

        }, {
            key: "initChild",
            value: function initChild(param) {
                var _this2 = this;

                var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var exclude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                var componentKeys = this.findComponentKeys(name);
                var initDataFn;

                if (param && param.length) {
                    forEach(param).call(param, function (item, index) {
                        if (!includes(exclude).call(exclude, componentKeys[index])) {
                            initDataFn = _this2.components[componentKeys[index]].initData;
                            initDataFn && initDataFn(item);
                        }
                    });

                    return true;
                } else {
                    return false;
                }
            }
            /**
             * 重置方法
             * @param name 子组件名称
             */

        }, {
            key: "resetChild",
            value: function resetChild() {
                var _this3 = this;

                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                var componentKeys = this.findComponentKeys(name);

                forEach(componentKeys).call(componentKeys, function (key) {
                    var resetDataFn = _this3.components[key].resetData;
                    resetDataFn && resetDataFn();
                });
            }
            /**
             * 执行某个方法
             * @param fnName 方法名称
             * @param name 注册组件名称
             * @param fnParam 方法参数 协定类型为[[],[]]
             */

        }, {
            key: "execute",
            value: function execute(fnName) {
                var _this4 = this;

                var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var fnParam = arguments.length > 2 ? arguments[2] : undefined;
                var componentKeys = this.findComponentKeys(name);

                forEach(componentKeys).call(componentKeys, function (key, index) {
                    var fn = _this4.components[key][fnName];

                    if (fn) {
                        fnParam && fnParam[index] ? fn(fnParam[index]) : fn();
                    }
                });
            }
            /**
             * 查找注册组件key
             * @param name 名称
             * @private
             */

        }, {
            key: "findComponentKeys",
            value: function findComponentKeys(name) {
                var _context;

                return filter(_context = keys$4(this.components)).call(_context, function (v) {
                    return indexOf(v).call(v, name) > -1;
                });
            }
        }]);

        return FormControl;
    }();

    // `Array.isArray` method
    // https://tc39.es/ecma262/#sec-array.isarray
    _export({ target: 'Array', stat: true }, {
        isArray: isArray$3
    });

    var isArray$2 = path.Array.isArray;

    var isArray$1 = isArray$2;

    var isArray = isArray$1;

    var $stringify$1 = getBuiltIn('JSON', 'stringify');
    var re = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;

    var fix = function (match, offset, string) {
        var prev = string.charAt(offset - 1);
        var next = string.charAt(offset + 1);
        if ((low.test(match) && !hi.test(next)) || (hi.test(match) && !low.test(prev))) {
            return '\\u' + match.charCodeAt(0).toString(16);
        } return match;
    };

    var FORCED$3 = fails(function () {
        return $stringify$1('\uDF06\uD834') !== '"\\udf06\\ud834"'
            || $stringify$1('\uDEAD') !== '"\\udead"';
    });

    if ($stringify$1) {
        // `JSON.stringify` method
        // https://tc39.es/ecma262/#sec-json.stringify
        // https://github.com/tc39/proposal-well-formed-stringify
        _export({ target: 'JSON', stat: true, forced: FORCED$3 }, {
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            stringify: function stringify(it, replacer, space) {
                var result = $stringify$1.apply(null, arguments);
                return typeof result == 'string' ? result.replace(re, fix) : result;
            }
        });
    }

    // eslint-disable-next-line es/no-json -- safe
    if (!path.JSON) path.JSON = { stringify: JSON.stringify };

    // eslint-disable-next-line no-unused-vars -- required for `.length`
    var stringify$2 = function stringify(it, replacer, space) {
        return path.JSON.stringify.apply(null, arguments);
    };

    var stringify$1 = stringify$2;

    var stringify = stringify$1;

    var createProperty = function (object, key, value) {
        var propertyKey = toPrimitive(key);
        if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
        else object[propertyKey] = value;
    };

    var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('slice');

    var SPECIES = wellKnownSymbol('species');
    var nativeSlice = [].slice;
    var max$1 = Math.max;

    // `Array.prototype.slice` method
    // https://tc39.es/ecma262/#sec-array.prototype.slice
    // fallback for not array-like ES3 strings and DOM objects
    _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
        slice: function slice(start, end) {
            var O = toIndexedObject(this);
            var length = toLength(O.length);
            var k = toAbsoluteIndex(start, length);
            var fin = toAbsoluteIndex(end === undefined ? length : end, length);
            // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
            var Constructor, result, n;
            if (isArray$3(O)) {
                Constructor = O.constructor;
                // cross-realm fallback
                if (typeof Constructor == 'function' && (Constructor === Array || isArray$3(Constructor.prototype))) {
                    Constructor = undefined;
                } else if (isObject(Constructor)) {
                    Constructor = Constructor[SPECIES];
                    if (Constructor === null) Constructor = undefined;
                }
                if (Constructor === Array || Constructor === undefined) {
                    return nativeSlice.call(O, k, fin);
                }
            }
            result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
            for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
            result.length = n;
            return result;
        }
    });

    var slice$3 = entryVirtual('Array').slice;

    var ArrayPrototype$6 = Array.prototype;

    var slice_1 = function (it) {
        var own = it.slice;
        return it === ArrayPrototype$6 || (it instanceof Array && own === ArrayPrototype$6.slice) ? slice$3 : own;
    };

    var slice$2 = slice_1;

    var slice$1 = slice$2;

    // call something on iterator step with safe closing on error
    var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
        try {
            return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
            // 7.4.6 IteratorClose(iterator, completion)
        } catch (error) {
            iteratorClose(iterator);
            throw error;
        }
    };

    // `Array.from` method implementation
    // https://tc39.es/ecma262/#sec-array.from
    var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod$1(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
        // if the target is not iterable or it's an array with the default iterator - use a simple case
        if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
            iterator = iteratorMethod.call(O);
            next = iterator.next;
            result = new C();
            for (;!(step = next.call(iterator)).done; index++) {
                value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
                createProperty(result, index, value);
            }
        } else {
            length = toLength(O.length);
            result = new C(length);
            for (;length > index; index++) {
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty(result, index, value);
            }
        }
        result.length = index;
        return result;
    };

    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
        // eslint-disable-next-line es/no-array-from -- required for testing
        Array.from(iterable);
    });

    // `Array.from` method
    // https://tc39.es/ecma262/#sec-array.from
    _export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
        from: arrayFrom
    });

    var from_1$2 = path.Array.from;

    var from_1$1 = from_1$2;

    var from_1 = from_1$1;

    var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
    var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
    var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/679
    var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
    });

    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

    var isConcatSpreadable = function (O) {
        if (!isObject(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray$3(O);
    };

    var FORCED$2 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

    // `Array.prototype.concat` method
    // https://tc39.es/ecma262/#sec-array.prototype.concat
    // with adding support of @@isConcatSpreadable and @@species
    _export({ target: 'Array', proto: true, forced: FORCED$2 }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        concat: function concat(arg) {
            var O = toObject(this);
            var A = arraySpeciesCreate(O, 0);
            var n = 0;
            var i, k, length, len, E;
            for (i = -1, length = arguments.length; i < length; i++) {
                E = i === -1 ? O : arguments[i];
                if (isConcatSpreadable(E)) {
                    len = toLength(E.length);
                    if (n + len > MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
                } else {
                    if (n >= MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    createProperty(A, n++, E);
                }
            }
            A.length = n;
            return A;
        }
    });

    var hiddenKeys = enumBugKeys.concat('length', 'prototype');

    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    // eslint-disable-next-line es/no-object-getownpropertynames -- safe
    var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return objectKeysInternal(O, hiddenKeys);
    };

    var objectGetOwnPropertyNames = {
        f: f$3
    };

    /* eslint-disable es/no-object-getownpropertynames -- safe */

    var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;

    var toString = {}.toString;

    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
        ? Object.getOwnPropertyNames(window) : [];

    var getWindowNames = function (it) {
        try {
            return $getOwnPropertyNames$1(it);
        } catch (error) {
            return windowNames.slice();
        }
    };

    // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    var f$2 = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]'
            ? getWindowNames(it)
            : $getOwnPropertyNames$1(toIndexedObject(it));
    };

    var objectGetOwnPropertyNamesExternal = {
        f: f$2
    };

    // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
    var f$1 = Object.getOwnPropertySymbols;

    var objectGetOwnPropertySymbols = {
        f: f$1
    };

    var f = wellKnownSymbol;

    var wellKnownSymbolWrapped = {
        f: f
    };

    var defineProperty = objectDefineProperty.f;

    var defineWellKnownSymbol = function (NAME) {
        var Symbol = path.Symbol || (path.Symbol = {});
        if (!has$1(Symbol, NAME)) defineProperty(Symbol, NAME, {
            value: wellKnownSymbolWrapped.f(NAME)
        });
    };

    var $forEach = arrayIteration.forEach;

    var HIDDEN = sharedKey('hidden');
    var SYMBOL = 'Symbol';
    var PROTOTYPE = 'prototype';
    var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
    var setInternalState = internalState.set;
    var getInternalState = internalState.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE];
    var $Symbol = global_1.Symbol;
    var $stringify = getBuiltIn('JSON', 'stringify');
    var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    var nativeDefineProperty = objectDefineProperty.f;
    var nativeGetOwnPropertyNames = objectGetOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = objectPropertyIsEnumerable.f;
    var AllSymbols = shared('symbols');
    var ObjectPrototypeSymbols = shared('op-symbols');
    var StringToSymbolRegistry = shared('string-to-symbol-registry');
    var SymbolToStringRegistry = shared('symbol-to-string-registry');
    var WellKnownSymbolsStore = shared('wks');
    var QObject = global_1.QObject;
    // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

    // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDescriptor = descriptors && fails(function () {
        return objectCreate(nativeDefineProperty({}, 'a', {
            get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
        })).a != 7;
    }) ? function (O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
            nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
    } : nativeDefineProperty;

    var wrap$1 = function (tag, description) {
        var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE]);
        setInternalState(symbol, {
            type: SYMBOL,
            tag: tag,
            description: description
        });
        if (!descriptors) symbol.description = description;
        return symbol;
    };

    var isSymbol = useSymbolAsUid ? function (it) {
        return typeof it == 'symbol';
    } : function (it) {
        return Object(it) instanceof $Symbol;
    };

    var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPrimitive(P, true);
        anObject(Attributes);
        if (has$1(AllSymbols, key)) {
            if (!Attributes.enumerable) {
                if (!has$1(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
                O[HIDDEN][key] = true;
            } else {
                if (has$1(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
            } return setSymbolDescriptor(O, key, Attributes);
        } return nativeDefineProperty(O, key, Attributes);
    };

    var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function (key) {
            if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
    };

    var $create = function create(O, Properties) {
        return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
    };

    var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPrimitive(V, true);
        var enumerable = nativePropertyIsEnumerable.call(this, P);
        if (this === ObjectPrototype && has$1(AllSymbols, P) && !has$1(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !has$1(this, P) || !has$1(AllSymbols, P) || has$1(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };

    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPrimitive(P, true);
        if (it === ObjectPrototype && has$1(AllSymbols, key) && !has$1(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);
        if (descriptor && has$1(AllSymbols, key) && !(has$1(it, HIDDEN) && it[HIDDEN][key])) {
            descriptor.enumerable = true;
        }
        return descriptor;
    };

    var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names, function (key) {
            if (!has$1(AllSymbols, key) && !has$1(hiddenKeys$1, key)) result.push(key);
        });
        return result;
    };

    var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function (key) {
            if (has$1(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has$1(ObjectPrototype, key))) {
                result.push(AllSymbols[key]);
            }
        });
        return result;
    };

    // `Symbol` constructor
    // https://tc39.es/ecma262/#sec-symbol-constructor
    if (!nativeSymbol) {
        $Symbol = function Symbol() {
            if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
            var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
            var tag = uid(description);
            var setter = function (value) {
                if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
                if (has$1(this, HIDDEN) && has$1(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
            };
            if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
            return wrap$1(tag, description);
        };

        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
            return getInternalState(this).tag;
        });

        redefine($Symbol, 'withoutSetter', function (description) {
            return wrap$1(uid(description), description);
        });

        objectPropertyIsEnumerable.f = $propertyIsEnumerable;
        objectDefineProperty.f = $defineProperty;
        objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
        objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

        wellKnownSymbolWrapped.f = function (name) {
            return wrap$1(wellKnownSymbol(name), name);
        };

        if (descriptors) {
            // https://github.com/tc39/proposal-Symbol-description
            nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
                configurable: true,
                get: function description() {
                    return getInternalState(this).description;
                }
            });
        }
    }

    _export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
        Symbol: $Symbol
    });

    $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
        defineWellKnownSymbol(name);
    });

    _export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
        // `Symbol.for` method
        // https://tc39.es/ecma262/#sec-symbol.for
        'for': function (key) {
            var string = String(key);
            if (has$1(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
            var symbol = $Symbol(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry[symbol] = string;
            return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.es/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
            if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
            if (has$1(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        },
        useSetter: function () { USE_SETTER = true; },
        useSimple: function () { USE_SETTER = false; }
    });

    _export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
        // `Object.create` method
        // https://tc39.es/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.es/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.es/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });

    _export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.es/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
    });

    // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
    // https://bugs.chromium.org/p/v8/issues/detail?id=3443
    _export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            return objectGetOwnPropertySymbols.f(toObject(it));
        }
    });

    // `JSON.stringify` method behavior with symbols
    // https://tc39.es/ecma262/#sec-json.stringify
    if ($stringify) {
        var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
            var symbol = $Symbol();
            // MS Edge converts symbol values to JSON as {}
            return $stringify([symbol]) != '[null]'
                // WebKit converts symbol values to JSON as null
                || $stringify({ a: symbol }) != '{}'
                // V8 throws on boxed symbols
                || $stringify(Object(symbol)) != '{}';
        });

        _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            stringify: function stringify(it, replacer, space) {
                var args = [it];
                var index = 1;
                var $replacer;
                while (arguments.length > index) args.push(arguments[index++]);
                $replacer = replacer;
                if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
                if (!isArray$3(replacer)) replacer = function (key, value) {
                    if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value;
                };
                args[1] = replacer;
                return $stringify.apply(null, args);
            }
        });
    }

    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
        createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
    }
    // `Symbol.prototype[@@toStringTag]` property
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
    setToStringTag($Symbol, SYMBOL);

    hiddenKeys$1[HIDDEN] = true;

    // `Symbol.asyncIterator` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.asynciterator
    defineWellKnownSymbol('asyncIterator');

    // `Symbol.hasInstance` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.hasinstance
    defineWellKnownSymbol('hasInstance');

    // `Symbol.isConcatSpreadable` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
    defineWellKnownSymbol('isConcatSpreadable');

    // `Symbol.iterator` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.iterator
    defineWellKnownSymbol('iterator');

    // `Symbol.match` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.match
    defineWellKnownSymbol('match');

    // `Symbol.matchAll` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.matchall
    defineWellKnownSymbol('matchAll');

    // `Symbol.replace` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.replace
    defineWellKnownSymbol('replace');

    // `Symbol.search` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.search
    defineWellKnownSymbol('search');

    // `Symbol.species` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.species
    defineWellKnownSymbol('species');

    // `Symbol.split` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.split
    defineWellKnownSymbol('split');

    // `Symbol.toPrimitive` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.toprimitive
    defineWellKnownSymbol('toPrimitive');

    // `Symbol.toStringTag` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.tostringtag
    defineWellKnownSymbol('toStringTag');

    // `Symbol.unscopables` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.unscopables
    defineWellKnownSymbol('unscopables');

    // JSON[@@toStringTag] property
    // https://tc39.es/ecma262/#sec-json-@@tostringtag
    setToStringTag(global_1.JSON, 'JSON', true);

    var symbol$2 = path.Symbol;

    // `Symbol.asyncDispose` well-known symbol
    // https://github.com/tc39/proposal-using-statement
    defineWellKnownSymbol('asyncDispose');

    // `Symbol.dispose` well-known symbol
    // https://github.com/tc39/proposal-using-statement
    defineWellKnownSymbol('dispose');

    // `Symbol.matcher` well-known symbol
    // https://github.com/tc39/proposal-pattern-matching
    defineWellKnownSymbol('matcher');

    // `Symbol.metadata` well-known symbol
    // https://github.com/tc39/proposal-decorators
    defineWellKnownSymbol('metadata');

    // `Symbol.observable` well-known symbol
    // https://github.com/tc39/proposal-observable
    defineWellKnownSymbol('observable');

    // TODO: remove from `core-js@4`


    // `Symbol.patternMatch` well-known symbol
    // https://github.com/tc39/proposal-pattern-matching
    defineWellKnownSymbol('patternMatch');

    // TODO: remove from `core-js@4`


    defineWellKnownSymbol('replaceAll');

    // TODO: Remove from `core-js@4`

    // TODO: Remove from `core-js@4`


    var symbol$1 = symbol$2;

    var symbol = symbol$1;

    var getIteratorMethod_1 = getIteratorMethod$1;

    var getIteratorMethod = getIteratorMethod_1;

    function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof symbol !== "undefined" && getIteratorMethod(o) || o["@@iterator"]; if (!it) { if (isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { var _context; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = slice$1(_context = Object.prototype.toString.call(o)).call(_context, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return from_1(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    /**
     * 校验工具类
     * @LastEditors: huliang54
     * @LastEditTime: 2021-03-30 12:00:00
     */
    var ValidateUtil = /*#__PURE__*/function () {
        function ValidateUtil() {
            _classCallCheck(this, ValidateUtil);
        }

        _createClass(ValidateUtil, null, [{
            key: "isEmptyList",
            value:
                /**
                 * 判断是否空或者空数组
                 * @param data 数据源
                 * @return {boolean}
                 */
                function isEmptyList(data) {
                    return !data || isArray(data) && data.length === 0;
                }
            /**
             * 判断非空数组
             * @param data 源数据
             * @return {boolean}
             */

        }, {
            key: "notEmptyList",
            value: function notEmptyList(data) {
                return !ValidateUtil.isEmptyList(data);
            }
            /**
             * 判断非空
             * @param data 源数据
             * @return {boolean}
             */

        }, {
            key: "isNotEmpty",
            value: function isNotEmpty(data) {
                if (!data) {
                    if (data === 0) {
                        return true;
                    } else {
                        return false;
                    }
                } else if (isArray(data) && data.length === 0) {
                    return false;
                } else if (!isArray(data) && stringify(data) === '{}') {
                    return false;
                } else {
                    return true;
                }
            }
            /**
             * 判断空
             * @param data 源数据
             * @return {boolean}
             */

        }, {
            key: "isEmpty",
            value: function isEmpty(data) {
                return !ValidateUtil.isNotEmpty(data);
            }
            /**
             * 校验对象中是否有某些key
             * @param tar 目标对象
             * @param keys 校验key:List
             * @return {boolean}
             */

        }, {
            key: "hasKeys",
            value: function hasKeys(tar, keys) {
                var _iterator = _createForOfIteratorHelper(keys),
                    _step;

                try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                        var k = _step.value;

                        if (!Object.prototype.hasOwnProperty.call(tar, k)) {
                            return false;
                        }
                    }
                } catch (err) {
                    _iterator.e(err);
                } finally {
                    _iterator.f();
                }

                return true;
            }
            /**
             * 校验对象中的keys路径是否为空
             * @param data 原始对象
             * @param keys key路径数组
             * @example isNotEmptyKeys({a:{b:{c:1}}},["a","b","c"])
             * @return {boolean}
             */

        }, {
            key: "isNotEmptyKeys",
            value: function isNotEmptyKeys(data, keys) {
                if (ValidateUtil.isEmpty(data) || ValidateUtil.isEmptyList(keys)) {
                    return false;
                }

                var len = keys.length;
                var i = 0;
                var tmp = data;

                while (i < len) {
                    tmp = tmp[keys[i]];

                    if (ValidateUtil.isEmpty(tmp)) {
                        return false;
                    }

                    i++;
                }

                return true;
            }
        }]);

        return ValidateUtil;
    }();

    /**
     *
     * 入参类型
     * @param {code: string,label: string,value: string | number,id?: number,showTip?: boolean,group?: string[],desc?: string}
     */

    var Enum = /*#__PURE__*/function () {
        function Enum(arr) {
            var _this = this;

            _classCallCheck(this, Enum);

            if (ValidateUtil.isEmptyList(arr)) {
                throw new Error('参数错误,请传入一个数组');
            }

            this.database = arr; // 生成map

            forEach(arr).call(arr, function (item) {
                var _context;

                forEach(_context = keys$4(item)).call(_context, function (k) {
                    if (!_this["".concat(k, "Map")]) {
                        _this["".concat(k, "Map")] = {};
                    }

                    _this["".concat(k, "Map")][item[k]] = item;
                    _this[item[k]] = item;
                });
            });
        }
        /**
         * 获取原始数组
         * @return {[]}
         */


        _createClass(Enum, [{
            key: "getValues",
            value: function getValues() {
                return this.database;
            }
            /**
             * 获取数据 不包含全部
             * @param key 全部的key
             * @param value 全部的value
             * @return {[]}
             */

        }, {
            key: "getValueNotAll",
            value: function getValueNotAll(key, value) {
                var _context2;

                var k = key || 'id';
                var v = value || -1;
                var result = [];

                forEach(_context2 = this.database).call(_context2, function (item) {
                    if (item[k] !== v) {
                        result.push(item);
                    }
                });

                return result;
            }
            /**
             * 分组取数据
             * @param groupName 分组名称
             * @return {[]}
             */

        }, {
            key: "group",
            value: function group(groupName) {
                var _context3;

                var result = [];

                forEach(_context3 = this.database).call(_context3, function (item) {
                    if (item.group && !ValidateUtil.isEmptyList(item.group)) {
                        var _context4;

                        if (includes(_context4 = item.group).call(_context4, groupName)) {
                            result.push(item);
                        }
                    }
                });

                return result;
            }
        }]);

        return Enum;
    }();

    var iterator$2 = wellKnownSymbolWrapped.f('iterator');

    var iterator$1 = iterator$2;

    var iterator = iterator$1;

    function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof symbol === "function" && typeof iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof symbol === "function" && obj.constructor === symbol && obj !== symbol.prototype ? "symbol" : typeof obj;
            };
        }

        return _typeof(obj);
    }

    // a string of all valid unicode whitespaces
    var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
        '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

    var whitespace = '[' + whitespaces + ']';
    var ltrim = RegExp('^' + whitespace + whitespace + '*');
    var rtrim = RegExp(whitespace + whitespace + '*$');

    // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
    var createMethod = function (TYPE) {
        return function ($this) {
            var string = String(requireObjectCoercible($this));
            if (TYPE & 1) string = string.replace(ltrim, '');
            if (TYPE & 2) string = string.replace(rtrim, '');
            return string;
        };
    };

    var stringTrim = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimstart
        start: createMethod(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimend
        end: createMethod(2),
        // `String.prototype.trim` method
        // https://tc39.es/ecma262/#sec-string.prototype.trim
        trim: createMethod(3)
    };

    var non = '\u200B\u0085\u180E';

    // check that a method works with the correct list
    // of whitespaces and has a correct name
    var stringTrimForced = function (METHOD_NAME) {
        return fails(function () {
            return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
    };

    var $trim = stringTrim.trim;


    // `String.prototype.trim` method
    // https://tc39.es/ecma262/#sec-string.prototype.trim
    _export({ target: 'String', proto: true, forced: stringTrimForced('trim') }, {
        trim: function trim() {
            return $trim(this);
        }
    });

    var trim$3 = entryVirtual('String').trim;

    var StringPrototype = String.prototype;

    var trim_1 = function (it) {
        var own = it.trim;
        return typeof it === 'string' || it === StringPrototype
        || (it instanceof String && own === StringPrototype.trim) ? trim$3 : own;
    };

    var trim$2 = trim_1;

    var trim$1 = trim$2;

    /*
   * @Description: 字符串工具类
   * @LastEditors: huliang54
   * @LastEditTime: 2021-03-30 12:00:00
   */
    var StringUtil = /*#__PURE__*/function () {
        function StringUtil() {
            _classCallCheck(this, StringUtil);
        }

        _createClass(StringUtil, null, [{
            key: "toUpperCase",
            value:
                /**
                 * 转驼峰
                 * @param text 字符串
                 */
                function toUpperCase(text) {
                    return text.replace(/_(\w)/g, function (all, letter) {
                        return letter.toUpperCase();
                    });
                }
            /**
             * 转下划线
             * @param text 字符串
             * @return {string} 下划线字符串
             */

        }, {
            key: "toLowerCase",
            value: function toLowerCase(text) {
                return text.replace(/([A-Z])/g, '_$1').toLowerCase();
            }
            /**
             * 首字母转大写
             * @param text 字符串
             * @return {*}
             */

        }, {
            key: "upperFirst",
            value: function upperFirst(text) {
                return trim$1(text).call(text).replace(text[0], text[0].toUpperCase());
            }
        }]);

        return StringUtil;
    }();

    var isNotEmpty = ValidateUtil.isNotEmpty,
        notEmptyList = ValidateUtil.notEmptyList;
    var toLowerCase = StringUtil.toLowerCase;
    var CopyPropertyUtil = /*#__PURE__*/function () {
        function CopyPropertyUtil() {
            _classCallCheck(this, CopyPropertyUtil);
        }

        _createClass(CopyPropertyUtil, null, [{
            key: "copyBytargetBase",
            value:
                /**
                 * copy 目标所有属性
                 * @param src 原对象
                 * @param tar 目标对象
                 * @param init 初始值,有则在为空时赋值
                 * @param ignore 忽略属性
                 * @param oriCase 元数据类型
                 * @param ignoreNull 是否忽略空值
                 */
                function copyBytargetBase(src, tar, ignore, init, oriCase, ignoreNull) {
                    var keys = keys$4(tar);

                    var oriCaseTrans = oriCase || 'upper';

                    forEach(keys).call(keys, function (k) {
                        if (!(notEmptyList(ignore) && includes(ignore).call(ignore, k))) {
                            var key = oriCaseTrans === 'lower' ? toLowerCase(k) : k;

                            if (Object.prototype.hasOwnProperty.call(src, key)) {
                                if (ignoreNull) {
                                    isNotEmpty(src[key]) && (tar[k] = src[key]);
                                } else {
                                    tar[k] = src[key];
                                }
                            } else if (!ignoreNull) {
                                isNotEmpty(init) && Object.prototype.hasOwnProperty.call(init, key) && (tar[k] = init[key]);
                            }
                        }
                    });
                }
            /**
             * copy不为空的值(浅拷贝)
             * @param src 原对象
             * @param tar 目标对象
             */

        }, {
            key: "copyPropertiesIgnoreNull",
            value: function copyPropertiesIgnoreNull(src, tar, ignore) {
                var _context;

                forEach(_context = keys$4(src)).call(_context, function (k) {
                    if (isNotEmpty(src[k]) && Object.prototype.hasOwnProperty.call(tar, k)) {
                        if (!(notEmptyList(ignore) && includes(ignore).call(ignore, k))) {
                            tar[k] = src[k];
                        }
                    }
                });
            }
            /**
             * 浅拷贝
             * @param src 原对象
             * @param tar 目标对象
             */

        }, {
            key: "copyProperties",
            value: function copyProperties(src, tar) {
                var _context2;

                forEach(_context2 = keys$4(src)).call(_context2, function (k) {
                    Object.prototype.hasOwnProperty.call(tar, k) && (tar[k] = src[k]);
                });
            }
            /**
             * 根据原始数据赋值目标数据
             * @param src 元数据
             * @param tar 目标数据
             * @param ignore 忽略属性
             */

        }, {
            key: "copyPropertiesBySrc",
            value: function copyPropertiesBySrc(src, tar, ignore) {
                var _context3;

                var ignoreNull = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                var hasIgnore = ignore && ignore.length;

                forEach(_context3 = keys$4(src)).call(_context3, function (k) {
                    if (!(hasIgnore && indexOf(ignore).call(ignore, k) > -1)) {
                        if (ignoreNull) {
                            isNotEmpty(src[k]) && (tar[k] = src[k]);
                        } else {
                            tar[k] = src[k];
                        }
                    }
                });
            }
            /**
             * copy 目标所有属性
             * @param src 原对象
             * @param tar 目标对象
             * @param ignore 忽略属性
             * @param oriCase 元数据类型
             */

        }, {
            key: "copyByTarget",
            value: function copyByTarget(src, tar, ignore, oriCase) {
                var oriCaseTrans = oriCase || 'upper';
                CopyPropertyUtil.copyBytargetBase(src, tar, ignore, false, oriCaseTrans);
            }
            /**
             * copy 目标所有属性
             * @param src 原对象
             * @param tar 目标对象
             * @param ignore 忽略属性
             * @param oriCase 元数据类型
             */

        }, {
            key: "copyByTargetIgnoreNull",
            value: function copyByTargetIgnoreNull(src, tar, ignore, oriCase) {
                var oriCaseTrans = oriCase || 'upper';
                CopyPropertyUtil.copyBytargetBase(src, tar, ignore, false, oriCaseTrans, true);
            }
            /**
             * copy 目标所有属性,没有使用默认值
             * @param src 原对象
             * @param tar 目标对象
             * @param init 初始值配置
             * @param ignore 忽略属性
             * @param oriCase 元数据类型
             */

        }, {
            key: "copyBytargetForce",
            value: function copyBytargetForce(src, tar, init, ignore, oriCase) {
                var oriCaseTrans = oriCase || 'upper';
                CopyPropertyUtil.copyBytargetBase(src, tar, ignore, init, oriCaseTrans, false);
            }
            /**
             * 对象|数组深拷贝
             * @param source 拷贝对象
             * @return 拷贝结果
             */

        }, {
            key: "deepCopy",
            value: function deepCopy(source) {
                if (!source) {
                    throw new Error('源数据不能为空');
                }

                var sourceCopy = source instanceof Array ? [] : {};

                for (var item in source) {
                    if (Object.prototype.hasOwnProperty.call(source, item)) {
                        if (source[item] == null) {
                            sourceCopy[item] = null;
                        } else {
                            sourceCopy[item] = _typeof(source[item]) === 'object' ? CopyPropertyUtil.deepCopy(source[item]) : source[item];
                        }
                    }
                }

                return sourceCopy;
            }
        }]);

        return CopyPropertyUtil;
    }();

    /**
     * 类型判断工具类
     * @LastEditors: huliang54
     */
    var TypeUtil = /*#__PURE__*/function () {
        function TypeUtil() {
            _classCallCheck(this, TypeUtil);
        }

        _createClass(TypeUtil, null, [{
            key: "isString",
            value: function isString(obj) {
                return Object.prototype.toString.call(obj) === '[object String]';
            }
        }, {
            key: "isObject",
            value: function isObject(obj) {
                return Object.prototype.toString.call(obj) === '[object Object]';
            }
        }, {
            key: "isHtmlElement",
            value: function isHtmlElement(node) {
                return node && node.nodeType === Node.ELEMENT_NODE;
            }
        }, {
            key: "isFunction",
            value: function isFunction(functionToCheck) {
                var getType = {};
                return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
            }
        }, {
            key: "isUndefined",
            value: function isUndefined(val) {
                return val === 0;
            }
        }, {
            key: "isDefined",
            value: function isDefined(val) {
                return val !== undefined && val !== null;
            }
        }, {
            key: "isFirefox",
            value: function isFirefox() {
                return !!window.navigator.userAgent.match(/firefox/i);
            }
        }]);

        return TypeUtil;
    }();

    var getOwnPropertyNames$3 = objectGetOwnPropertyNamesExternal.f;

    // eslint-disable-next-line es/no-object-getownpropertynames -- required for testing
    var FAILS_ON_PRIMITIVES = fails(function () { return !Object.getOwnPropertyNames(1); });

    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    _export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
        getOwnPropertyNames: getOwnPropertyNames$3
    });

    var Object$1 = path.Object;

    var getOwnPropertyNames$2 = function getOwnPropertyNames(it) {
        return Object$1.getOwnPropertyNames(it);
    };

    var getOwnPropertyNames$1 = getOwnPropertyNames$2;

    var getOwnPropertyNames = getOwnPropertyNames$1;

    /*
   * @Description: 对象工具类
   * @LastEditors: huliang54
   * @LastEditTime: 2021-03-30 12:00:00
   */
    var ObjectUtil = /*#__PURE__*/function () {
        function ObjectUtil() {
            _classCallCheck(this, ObjectUtil);
        }

        _createClass(ObjectUtil, null, [{
            key: "delKey",
            value:
                /**
                 * 删除KEY
                 * @param target 对象
                 * @param key key名
                 */
                function delKey(target, key) {
                    key in target && delete target[key];
                }
            /**
             * 清空对象,不排除
             * @param target 目标对象
             * @param include 包含key
             * @param exclude 排除key
             */

        }, {
            key: "delKeys",
            value: function delKeys(target, include, exclude) {
                if (include && include.length) {
                    forEach(include).call(include, function (k) {
                        ObjectUtil.delKey(target, k);
                    });
                } else {
                    var _context;

                    forEach(_context = keys$4(target)).call(_context, function (k) {
                        if (exclude && exclude.length) {
                            !includes(exclude).call(exclude, k) && ObjectUtil.delKey(target, k);
                        } else {
                            ObjectUtil.delKey(target, k);
                        }
                    });
                }
            }
            /**
             * 清空对象排除
             * @param target 目标对象
             * @param exclude 排除项
             */

        }, {
            key: "delKeysIgnore",
            value: function delKeysIgnore(target, exclude) {
                var _context2;

                forEach(_context2 = keys$4(target)).call(_context2, function (k) {
                    !includes(exclude).call(exclude, k) && ObjectUtil.delKey(target, k);
                });
            }
            /**
             * 浅比较两个对象是否具有相同Key
             * @param o1 对象1
             * @param o2 对象2
             * @return boolean
             */

        }, {
            key: "equal",
            value: function equal(o1, o2, ignore) {
                // 当前Object对象
                var propsO1 = getOwnPropertyNames(o1); // 要比较的另外一个Object对象


                var propsO2 = getOwnPropertyNames(o2);

                if (propsO1.length !== propsO2.length) {
                    return false;
                }

                var hasIgnore = ignore && ignore.length;

                for (var i = 0, max = propsO1.length; i < max; i++) {
                    var propName = propsO1[i];

                    if (!(hasIgnore && indexOf(ignore).call(ignore, propName) > -1)) {
                        if (o1[propName] !== o2[propName]) {
                            return false;
                        }
                    }
                }

                return true;
            }
            /**
             * 转下划线
             * @param text 字符串
             */

        }, {
            key: "toLowerCase",
            value: function toLowerCase(text) {
                return text.replace(/([A-Z])/g, '_$1').toLowerCase();
            }
            /**
             * 对象所有key转下划线
             */

        }, {
            key: "toLowerCaseObj",
            value: function toLowerCaseObj(data) {
                var res = {};

                function deepTrans(o, tmp) {
                    for (var key in o) {
                        var _context3;

                        if (slice$1(_context3 = Object.prototype.toString.call(o[key])).call(_context3, 8, -1) === 'Object') {
                            tmp[ObjectUtil.toLowerCase(key)] = {};
                            deepTrans(o[key], tmp[ObjectUtil.toLowerCase(key)]);
                        } else {
                            tmp[ObjectUtil.toLowerCase(key)] = o[key];
                        }
                    }
                }

                deepTrans(data, res);
                return res;
            }
            /**
             * merge,loading用
             */

        }, {
            key: "merge",
            value: function merge(target) {
                for (var i = 1, j = arguments.length; i < j; i++) {
                    var source = arguments[i] || {};

                    for (var prop in source) {
                        if (Object.prototype.hasOwnProperty.call(source, prop)) {
                            var value = source[prop];

                            if (value !== undefined) {
                                target[prop] = value;
                            }
                        }
                    }
                }

                return target;
            }
        }]);

        return ObjectUtil;
    }();

    var keys$3 = entryVirtual('Array').keys;

    var keys$2 = keys$3;

    var ArrayPrototype$5 = Array.prototype;

    var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
    };

    var keys_1 = function (it) {
        var own = it.keys;
        return it === ArrayPrototype$5 || (it instanceof Array && own === ArrayPrototype$5.keys)
        // eslint-disable-next-line no-prototype-builtins -- safe
        || DOMIterables.hasOwnProperty(classof(it)) ? keys$2 : own;
    };

    var keys$1 = keys_1;

    var keys = keys$1;

    var LsUtil = /*#__PURE__*/function () {
        function LsUtil() {
            _classCallCheck(this, LsUtil);
        }

        _createClass(LsUtil, null, [{
            key: "getItem",
            value:
                /**
                 * 获取
                 * @param key 键
                 * @param win window对象
                 * @return any 结果
                 */
                function getItem(key, win) {
                    if (!key) {
                        return;
                    }

                    var w = win || window;
                    var res;

                    try {
                        res = JSON.parse(w.localStorage.getItem(key));
                    } catch (err) {
                        res = w.localStorage.getItem(key);
                    }

                    return res;
                }
            /**
             * 设置值
             * @param key 键
             * @param val 值
             * @param win window对象
             */

        }, {
            key: "setItem",
            value: function setItem(key, val, win) {
                var w = win || window;

                try {
                    if (!key) {
                        return;
                    }

                    w.localStorage[key] = stringify(val);
                } catch (err) {
                    console.error(err);
                }
            }
            /**
             * 判断是否有key
             * @param key
             * @param win window对象
             */

        }, {
            key: "hasItem",
            value: function hasItem(key, win) {
                var w = win || window;
                return ValidateUtil.isNotEmpty(w.localStorage.getItem(key));
            }
            /**
             * 移出某一项
             * @param key
             * @param win window对象
             */

        }, {
            key: "removeItem",
            value: function removeItem(key, win) {
                if (!key) {
                    return;
                }

                var w = win || window;
                w.localStorage.removeItem(key);
            }
            /**
             * 清空
             * @param win window对象
             */

        }, {
            key: "clear",
            value: function clear(win) {
                var w = win || window;
                w.localStorage.clear();
            }
            /**
             * 获取所有key
             * @param win window对象
             */

        }, {
            key: "keys",
            value: function keys$1(win) {
                var _context;

                var w = win || window;

                keys(_context = w.localStorage).call(_context);
            }
        }]);

        return LsUtil;
    }();

    var concat$2 = entryVirtual('Array').concat;

    var ArrayPrototype$4 = Array.prototype;

    var concat_1 = function (it) {
        var own = it.concat;
        return it === ArrayPrototype$4 || (it instanceof Array && own === ArrayPrototype$4.concat) ? concat$2 : own;
    };

    var concat$1 = concat_1;

    var concat = concat$1;

    /**
     * url工具类
     * @LastEditors: huliang54
     * @LastEditTime: 2021-03-30 12:00:00
     */
    var _analysisUrl = function _analysisUrl(location) {
        var _context;

        location = location || window.location;
        var target = location.href ? location : document.createElement('a');
        typeof location === 'string' && (target.href = location);
        return {
            hash: target.hash && slice$1(_context = target.hash).call(_context, 1),
            host: target.host,
            hostname: target.hostname,
            href: target.href,
            pathname: target.pathname,
            port: target.port || '80',
            protocol: target.protocol,
            search: function () {
                var _context2, _context3;

                if (indexOf(_context2 = target.href).call(_context2, '#/') > -1) {
                    target.href = target.href.replace('#/', '');
                }

                var s = target.search;
                if (!s) return s;
                var temp = {};

                forEach(_context3 = slice$1(s).call(s, 1).split('&')).call(_context3, function (item) {
                    var kv = item.split('=');
                    temp[kv[0]] = kv[1];
                });

                return temp;
            }()
        };
    };

    var UrlUtil = /*#__PURE__*/function () {
        function UrlUtil() {
            _classCallCheck(this, UrlUtil);
        }

        _createClass(UrlUtil, null, [{
            key: "getSearch",
            value: function getSearch(key, location) {
                // 使用该方法 传入参数 第一个是需要获取的键 第二个是传入地址
                var tmp = _analysisUrl(location); // 如果没有传入参数 将所有的结果返回 如果 传入参数 将需要的键对应的值返回


                return key ? tmp.search[key] : tmp;
            }
        }, {
            key: "getHost",
            value: function getHost(location) {
                var tmp = _analysisUrl(location);

                return tmp.host;
            }
        }, {
            key: "getUrlModel",
            value: function getUrlModel(location) {
                return _analysisUrl(location);
            } // 截取真实url

        }, {
            key: "getUrlRelativePath",
            value: function getUrlRelativePath(location) {
                var _context4;

                var url = location || window.location;
                var arrUrl = url.split('//');

                var start = indexOf(_context4 = arrUrl[1]).call(_context4, '/');

                var relUrl = arrUrl[1].substring(start); // stop省略，截取从start开始到结尾的所有字符

                if (indexOf(relUrl).call(relUrl, '?') !== -1) {
                    relUrl = relUrl.split('?')[0];
                }

                return relUrl;
            }
        }, {
            key: "isUrl",
            value: function isUrl(url) {
                var exp = /http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- .\/?%&=]*)?/;
                var objExp = new RegExp(exp);
                return objExp.test(url);
            }
            /**
             * 替换url中search参数
             * @param url url地址
             * @param arg key
             * @param val 替换值
             * @return {*|string}
             */

        }, {
            key: "changeUrlArg",
            value: function changeUrlArg(url, arg, val) {
                var _context5, _context6, _context7;

                var pattern = "".concat(arg, "=([^&]*)");

                var replaceText = concat(_context5 = "".concat(arg, "=")).call(_context5, val);

                return url.match(pattern) ? url.replace(new RegExp("(".concat(arg, "=)([^&]*)"), 'gi'), replaceText) : url.match('[\?]') ? concat(_context6 = "".concat(url, "&")).call(_context6, replaceText) : concat(_context7 = "".concat(url, "?")).call(_context7, replaceText);
            }
            /**
             * 获取Url中如 arg=value的value值
             * @param url url链接
             * @param arg 参数名
             * @return {*} string |null
             */

        }, {
            key: "getUrlArg",
            value: function getUrlArg(url, arg) {
                var result = url.match(new RegExp("".concat(arg, "=([^&]*)"), 'i'));

                if (result && result.length) {
                    return result[1];
                } else {
                    return result;
                }
            }
        }]);

        return UrlUtil;
    }();

    /*
   * @Description: 数组工具类
   * @LastEditors: HL
   */
    var ListUtil = /*#__PURE__*/function () {
        function ListUtil() {
            _classCallCheck(this, ListUtil);
        }

        _createClass(ListUtil, null, [{
            key: "searchInsert",
            value:
                /**
                 * 排序数组找位置
                 * @param nums 数组
                 * @param target 目标值
                 */
                function searchInsert(nums, target) {
                    var len = nums.length;
                    var l = 0;
                    var r = len - 1;

                    while (l <= r) {
                        var mid = l + Math.floor((r - l) / 2);

                        if (nums[mid] < target) {
                            l = mid + 1;
                        } else {
                            r = mid - 1;
                        }
                    }

                    return l;
                }
        }, {
            key: "list2Tree",
            value: function list2Tree(list, key, pKey) {
                var res = [];
                var keyMap = {};

                forEach(list).call(list, function (item) {
                    keyMap[item[key]] = item;
                });

                forEach(list).call(list, function (item) {
                    var pItem = keyMap[item[pKey]];

                    if (pItem) {
                        if (!pItem.children) {
                            pItem.children = [];
                            pItem.children.push(item);
                        } else {
                            pItem.children.push(item);
                        }
                    } else {
                        res.push(item);
                    }
                });

                return res;
            }
        }]);

        return ListUtil;
    }();

    var test = [];
    var nativeSort = test.sort;

    // IE8-
    var FAILS_ON_UNDEFINED = fails(function () {
        test.sort(undefined);
    });
    // V8 bug
    var FAILS_ON_NULL = fails(function () {
        test.sort(null);
    });
    // Old WebKit
    var STRICT_METHOD$1 = arrayMethodIsStrict('sort');

    var FORCED$1 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$1;

    // `Array.prototype.sort` method
    // https://tc39.es/ecma262/#sec-array.prototype.sort
    _export({ target: 'Array', proto: true, forced: FORCED$1 }, {
        sort: function sort(comparefn) {
            return comparefn === undefined
                ? nativeSort.call(toObject(this))
                : nativeSort.call(toObject(this), aFunction$1(comparefn));
        }
    });

    var sort$2 = entryVirtual('Array').sort;

    var ArrayPrototype$3 = Array.prototype;

    var sort_1 = function (it) {
        var own = it.sort;
        return it === ArrayPrototype$3 || (it instanceof Array && own === ArrayPrototype$3.sort) ? sort$2 : own;
    };

    var sort$1 = sort_1;

    var sort = sort$1;

    var trim = stringTrim.trim;


    var $parseInt = global_1.parseInt;
    var hex = /^[+-]?0[Xx]/;
    var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22;

    // `parseInt` method
    // https://tc39.es/ecma262/#sec-parseint-string-radix
    var numberParseInt = FORCED ? function parseInt(string, radix) {
        var S = trim(String(string));
        return $parseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
    } : $parseInt;

    // `parseInt` method
    // https://tc39.es/ecma262/#sec-parseint-string-radix
    _export({ global: true, forced: parseInt != numberParseInt }, {
        parseInt: numberParseInt
    });

    var _parseInt$2 = path.parseInt;

    var _parseInt$1 = _parseInt$2;

    var _parseInt = _parseInt$1;

    var Watermark = /*#__PURE__*/function () {
        function Watermark(element, config) {
            _classCallCheck(this, Watermark);

            if (!element) {
                return;
            }

            this._element = element;
            this._config = {
                textArr: ['test', '自定义水印'],
                // 需要展示的文字，多行就多个元素【必填】
                font: '18px \'微软雅黑\'',
                // 字体样式
                fillStyle: 'rgba(170,170,170,0.18)',
                // 描边样式
                maxWidth: 180,
                // 文字水平时最大宽度
                minWidth: 120,
                // 文字水平时最小宽度
                lineHeight: 24,
                // 文字行高
                deg: -45,
                // 旋转的角度 0至-90之间
                marginRight: 150,
                // 每个水印的右间隔
                marginBottom: 50,
                // 每个水印的下间隔
                left: 20,
                // 整体背景距左边的距离
                top: 20,
                // 整体背景距上边的距离
                shadowColor: 'rgba(0, 0, 0, 0)',
                shadowOffsetX: '1px',
                shadowOffsetY: '1px',
                shadowBlur: '1px'
            };
            this.mergeConfig(config);
            this.init();
        }

        _createClass(Watermark, [{
            key: "init",
            value: function init() {
                var c = this.createCanvas();
                this.draw(c);
                var imgData = this.convertCanvasToImage(c);
                this.image2Dom(imgData);
            }
        }, {
            key: "mergeConfig",
            value: function mergeConfig(config) {
                CopyPropertyUtil.copyPropertiesIgnoreNull(config, this._config);
            }
            /**
             * 创建隐藏canvas
             */

        }, {
            key: "createCanvas",
            value: function createCanvas() {
                var c = document.createElement('canvas');
                c.style.display = 'none';
                document.body.appendChild(c);
                return c;
            }
            /**
             * 绘制canvas
             * @param c canvas dom
             */

        }, {
            key: "draw",
            value: function draw(c) {
                var _this = this;

                var ctx = c.getContext('2d'); // 切割超过最大宽度的文本并获取最大宽度

                var textArr = this._config.textArr || [];
                var wordBreakTextArr = [];
                var maxWidthArr = [];

                forEach(textArr).call(textArr, function (text) {
                    var result = _this.breakLinesForCanvas(ctx, "".concat(text), _this._config.maxWidth, _this._config.font);

                    wordBreakTextArr = concat(wordBreakTextArr).call(wordBreakTextArr, result.textArr);
                    maxWidthArr.push(result.maxWidth);
                });

                sort(maxWidthArr).call(maxWidthArr, function (a, b) {
                    return b - a;
                }); // 根据需要切割结果，动态改变canvas的宽和高


                var maxWidth = Math.max(maxWidthArr[0], this._config.minWidth);
                var lineHeight = this._config.lineHeight;
                var height = wordBreakTextArr.length * lineHeight;
                var degToPI = Math.PI * this._config.deg / 180;
                var absDeg = Math.abs(degToPI); // 根据旋转后的矩形计算最小画布的宽高

                var hSinDeg = height * Math.sin(absDeg);
                var hCosDeg = height * Math.cos(absDeg);
                var wSinDeg = maxWidth * Math.sin(absDeg);
                var wCosDeg = maxWidth * Math.cos(absDeg);
                c.width = _parseInt(String(hSinDeg + wCosDeg + this._config.marginRight), 10); // @ts-ignore

                c.height = _parseInt(wSinDeg + hCosDeg + this._config.marginBottom, 10); // 宽高重置后，样式也需重置

                ctx.font = this._config.font;
                ctx.fillStyle = this._config.fillStyle;
                ctx.shadowColor = this._config.shadowColor;
                ctx.shadowOffsetX = this._config.shadowOffsetX;
                ctx.shadowOffsetY = this._config.shadowOffsetY;
                ctx.shadowBlur = this._config.shadowBlur;
                ctx.textBaseline = 'hanging'; // 默认是alphabetic,需改基准线为贴着线的方式
                // 移动并旋转画布

                ctx.translate(0, wSinDeg);
                ctx.rotate(degToPI); // 绘制文本

                forEach(wordBreakTextArr).call(wordBreakTextArr, function (text, index) {
                    ctx.fillText(text, 0, lineHeight * index);
                });
            } // 将绘制好的canvas转成图片

        }, {
            key: "convertCanvasToImage",
            value: function convertCanvasToImage(canvas) {
                return canvas.toDataURL('image/png');
            }
            /**
             * base64加入dom
             * @param str 字符串
             */

        }, {
            key: "image2Dom",
            value: function image2Dom(imgData) {
                var _context;

                var divMask = document.createElement('div');
                divMask.className = 'global-watermark';
                divMask.style.cssText = 'position:fixed; left:0; top:0; right:0; bottom:0; z-index:9999; pointer-events:none;';
                divMask.style.backgroundImage = "url(".concat(imgData, ")");
                divMask.style.backgroundPosition = concat(_context = "".concat(this._config.left, "px ")).call(_context, this._config.top, "px");

                this._element.appendChild(divMask);
            }
            /**
             * 根据最大宽度切割文字
             * @param context ctx
             * @param text 文字
             * @param width 最大宽度
             * @param font 字体
             */

        }, {
            key: "breakLinesForCanvas",
            value: function breakLinesForCanvas(context, text, width, font) {
                var result = [];
                var maxWidth = 0; // 计算最大宽度

                if (font) {
                    context.font = font;
                } // 换行文字


                var breakPoint = this.findBreakPoint(text, width, context);

                while (breakPoint !== -1) {
                    result.push(text.substr(0, breakPoint));
                    text = text.substr(breakPoint);
                    maxWidth = width;
                    breakPoint = this.findBreakPoint(text, width, context);
                }

                if (text) {
                    result.push(text);
                    var lastTextWidth = context.measureText(text).width;
                    maxWidth = maxWidth !== 0 ? maxWidth : lastTextWidth;
                }

                return {
                    textArr: result,
                    maxWidth: maxWidth
                };
            }
            /**
             * 寻找切换断点
             * @param text 文字
             * @param width 宽度
             * @param context ctx
             */

        }, {
            key: "findBreakPoint",
            value: function findBreakPoint(text, width, context) {
                var min = 0;
                var max = text.length - 1;

                while (min <= max) {
                    var middle = Math.floor((min + max) / 2);
                    var middleWidth = context.measureText(text.substr(0, middle)).width;
                    var oneCharWiderThanMiddleWidth = context.measureText(text.substr(0, middle + 1)).width;

                    if (middleWidth <= width && oneCharWiderThanMiddleWidth > width) {
                        return middle;
                    }

                    if (middleWidth < width) {
                        min = middle + 1;
                    } else {
                        max = middle - 1;
                    }
                }

                return -1;
            }
        }]);

        return Watermark;
    }();

    var defaultConfig = {
        title: '确认要删除这条信息吗？',
        centered: true,
        icon: 'info-circle',
        width: 480,
        "class": 'base_confirm_tip',
        content: 'xxxx'
    };

    var mergeOption = function mergeOption(option) {
        var opt = JSON.parse(stringify(defaultConfig));

        if (option) {
            var _context;

            forEach(_context = keys$4(option)).call(_context, function (key) {
                opt[key] = option[key];
            });
        }

        return opt;
    };
    /**
     * 打开确认对话框
     * @param _this vue this
     * @param config 配置
     */


    var openConfirm = function openConfirm(_this, config) {
        var _context2;

        if (!_this) {
            throw new Error('请传入this');
        }

        if (!TypeUtil.isFunction(_this.$confirm)) {
            throw new Error('没有该方法');
        }

        var cfg = mergeOption(config);
        config["class"] && (cfg["class"] = concat(_context2 = "".concat(defaultConfig["class"], " ")).call(_context2, config["class"]));
        return _this.$confirm(cfg);
    };

    /**
     * 加载工具类
     * @LastEditors: huliang54
     */
    var LoadUtil = /*#__PURE__*/function () {
        function LoadUtil() {
            _classCallCheck(this, LoadUtil);
        }

        _createClass(LoadUtil, null, [{
            key: "loadJS",
            value: function loadJS(url) {
                return new promise(function (resolve) {
                    var script = document.createElement('script', null);
                    script.type = 'text/javascript';

                    if (script.readyState) {
                        script.onreadystatechange = function () {
                            if (script.readyState === 'loaded' || script.readyState === 'complete') {
                                script.onreadystatechange = null;
                                resolve();
                            }
                        };
                    } else {
                        script.onload = function () {
                            resolve();
                        };
                    }

                    script.src = url;
                    document.getElementsByTagName('head')[0].appendChild(script);
                });
            }
        }, {
            key: "loadCss",
            value: function loadCss(url) {
                var head = document.getElementsByTagName('head')[0];
                var link = document.createElement('link');
                link.type = 'text/css';
                link.rel = 'stylesheet';
                link.href = url;
                head.appendChild(link);
            }
        }, {
            key: "loadModule",
            value: function loadModule(url, name) {
                return new promise(function (resolve, reject) {
                    var script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = url;

                    script.onload = function () {
                        if (window[name]) {
                            resolve();
                        } else {
                            console.error(name, '模块加载失败，请检查模块资源是否成功加载');
                            reject();
                        }
                    };

                    script.onerror = function () {
                        console.error(name, ': 创建模块脚本元素失败');
                        reject();
                    };

                    document.body.appendChild(script);
                });
            }
        }]);

        return LoadUtil;
    }();

    function _defineProperty(obj, key, value) {
        if (key in obj) {
            defineProperty$2(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }

        return obj;
    }

    /*
   * @Description: dom工具
   * @LastEditors: huliang54
   */

    /* eslint-disable */
    var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
    var MOZ_HACK_REGEXP = /^moz([A-Z])/;
    var ieVersion = Number(document.documentMode);
    var DomUtil = /*#__PURE__*/function () {
        function DomUtil() {
            _classCallCheck(this, DomUtil);
        }

        _createClass(DomUtil, null, [{
            key: "once",
            value: function once(el, event, fn) {
                var listener = function listener() {
                    if (fn) {
                        // eslint-disable-next-line prefer-rest-params
                        fn.apply(this, arguments);
                    }

                    DomUtil.off(el, event, listener);
                };

                DomUtil.on(el, event, listener);
            }
        }, {
            key: "trim",
            value: function trim(string) {
                return (string || '').replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, '');
            }
        }, {
            key: "camelCase",
            value: function camelCase(name) {
                return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
                    return offset ? letter.toUpperCase() : letter;
                }).replace(MOZ_HACK_REGEXP, 'Moz$1');
            }
        }, {
            key: "hasClass",
            value: function hasClass(el, cls) {
                if (!el || !cls) return false;
                if (indexOf(cls).call(cls, ' ') !== -1) throw new Error('className should not contain space.');

                if (el.classList) {
                    return el.classList.contains(cls);
                } else {
                    var _context;

                    return indexOf(_context = " ".concat(el.className, " ")).call(_context, " ".concat(cls, " ")) > -1;
                }
            }
        }, {
            key: "addClass",
            value: function addClass(el, cls) {
                if (!el) return;
                var curClass = el.className;
                var classes = (cls || '').split(' ');

                for (var i = 0, j = classes.length; i < j; i++) {
                    var clsName = classes[i];

                    if (!clsName) {
                        // eslint-disable-next-line no-continue
                        continue;
                    }

                    if (el.classList) {
                        el.classList.add(clsName);
                    } else if (!DomUtil.hasClass(el, clsName)) {
                        curClass += " ".concat(clsName);
                    }
                }

                if (!el.classList) {
                    el.className = curClass;
                }
            }
        }, {
            key: "removeClass",
            value: function removeClass(el, cls) {
                if (!el || !cls) return;
                var classes = cls.split(' ');
                var curClass = " ".concat(el.className, " ");

                for (var i = 0, j = classes.length; i < j; i++) {
                    var clsName = classes[i]; // eslint-disable-next-line no-continue

                    if (!clsName) continue;

                    if (el.classList) {
                        el.classList.remove(clsName);
                    } else if (DomUtil.hasClass(el, clsName)) {
                        curClass = curClass.replace(" ".concat(clsName, " "), ' ');
                    }
                }

                if (!el.classList) {
                    el.className = trim$1(DomUtil).call(DomUtil, curClass);
                }
            }
        }, {
            key: "setStyle",
            value: function setStyle(element, styleName, value) {
                if (!element || !styleName) return;

                if (_typeof(styleName) === 'object') {
                    for (var prop in styleName) {
                        if (styleName.hasOwnProperty(prop)) {
                            DomUtil.setStyle(element, prop, styleName[prop]);
                        }
                    }
                } else {
                    styleName = DomUtil.camelCase(styleName);

                    if (styleName === 'opacity' && ieVersion < 9) {
                        element.style.filter = isNaN(value) ? '' : "alpha(opacity=".concat(value * 100, ")");
                    } else {
                        element.style[styleName] = value;
                    }
                }
            }
        }, {
            key: "isScroll",
            value: function isScroll(el, vertical) {
                var determinedDirection = vertical !== null || vertical !== undefined;
                var overflow = determinedDirection ? vertical ? DomUtil.getStyle(el, 'overflow-y') : DomUtil.getStyle(el, 'overflow-x') : DomUtil.getStyle(el, 'overflow');
                return overflow.match(/(scroll|auto)/);
            }
        }, {
            key: "getScrollContainer",
            value: function getScrollContainer(el, vertical) {
                var parent = el;

                while (parent) {
                    var _context2;

                    if (includes(_context2 = [window, document, document.documentElement]).call(_context2, parent)) {
                        return window;
                    }

                    if (DomUtil.isScroll(parent, vertical)) {
                        return parent;
                    }

                    parent = parent.parentNode;
                }

                return parent;
            }
        }, {
            key: "isInContainer",
            value: function isInContainer(el, container) {
                var _context3;

                if (!el || !container) return false;
                var elRect = el.getBoundingClientRect();
                var containerRect;

                if (includes(_context3 = [window, document, document.documentElement, null, undefined]).call(_context3, container)) {
                    containerRect = {
                        top: 0,
                        right: window.innerWidth,
                        bottom: window.innerHeight,
                        left: 0
                    };
                } else {
                    containerRect = container.getBoundingClientRect();
                }

                return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
            }
        }, {
            key: "getStyleComputedProperty",
            value: function getStyleComputedProperty(element, property) {
                if (element === window) {
                    element = document.documentElement;
                }

                if (element.nodeType !== 1) {
                    return [];
                } // NOTE: 1 DOM access here


                var css = window.getComputedStyle(element, null);
                return property ? css[property] : css;
            }
        }, {
            key: "getPositionSize",
            value: function getPositionSize(el, prop) {
                return el === window || el === document ? document.documentElement[prop] : el[prop];
            }
        }, {
            key: "getOffsetHeight",
            value: function getOffsetHeight(el) {
                return DomUtil.getPositionSize(el, 'offsetHeight');
            }
        }, {
            key: "getClientHeight",
            value: function getClientHeight(el) {
                return DomUtil.getPositionSize(el, 'clientHeight');
            }
        }, {
            key: "rafThrottle",
            value: function rafThrottle(fn) {
                var locked = false;
                return function () {
                    var _this = this;

                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    if (locked) return;
                    locked = true;
                    window.requestAnimationFrame(function (_) {
                        fn.apply(_this, args);
                        locked = false;
                    });
                };
            } // 交换dom位置

        }]);

        return DomUtil;
    }();

    _defineProperty(DomUtil, "on", function () {
        if (document.addEventListener) {
            return function (element, event, handler) {
                if (element && event && handler) {
                    element.addEventListener(event, handler, false);
                }
            };
        } else {
            return function (element, event, handler) {
                if (element && event && handler) {
                    element.attachEvent("on".concat(event), handler);
                }
            };
        }
    }());

    _defineProperty(DomUtil, "off", function () {
        if (document.removeEventListener) {
            return function (element, event, handler) {
                if (element && event) {
                    element.removeEventListener(event, handler, false);
                }
            };
        } else {
            return function (element, event, handler) {
                if (element && event) {
                    element.detachEvent("on".concat(event), handler);
                }
            };
        }
    }());

    _defineProperty(DomUtil, "getStyle", ieVersion < 9 ? function (element, styleName) {
        if (!element || !styleName) return null;
        styleName = DomUtil.camelCase(styleName);

        if (styleName === 'float') {
            styleName = 'styleFloat';
        }

        try {
            switch (styleName) {
                case 'opacity':
                    try {
                        return element.filters.item('alpha').opacity / 100;
                    } catch (e) {
                        return 1.0;
                    }

                default:
                    return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
            }
        } catch (e) {
            return element.style[styleName];
        }
    } : function (element, styleName) {
        if (!element || !styleName) return null;
        styleName = DomUtil.camelCase(styleName);

        if (styleName === 'float') {
            styleName = 'cssFloat';
        }

        try {
            var computed = document.defaultView.getComputedStyle(element, '');
            return element.style[styleName] || computed ? computed[styleName] : null;
        } catch (e) {
            return element.style[styleName];
        }
    });

    _defineProperty(DomUtil, "swapElements", function (a, b) {
        if (a === b) return; // 记录父元素

        var bp = b.parentNode;
        var ap = a.parentNode; // 记录下一个同级元素

        var an = a.nextElementSibling;
        var bn = b.nextElementSibling; // 如果参照物是邻近元素则直接调整位置

        if (an === b) return bp.insertBefore(b, a);
        if (bn === a) return ap.insertBefore(a, b);

        if (a.contains(b)) {
            return ap.insertBefore(b, a), bp.insertBefore(a, bn);
        } else {
            return bp.insertBefore(a, b), ap.insertBefore(b, an);
        }
    });

    // `Date.now` method
    // https://tc39.es/ecma262/#sec-date.now
    _export({ target: 'Date', stat: true }, {
        now: function now() {
            return new Date().getTime();
        }
    });

    var now$2 = path.Date.now;

    var now$1 = now$2;

    var now = now$1;

    var slice = [].slice;
    var MSIE = /MSIE .\./.test(engineUserAgent); // <- dirty ie9- check

    var wrap = function (scheduler) {
        return function (handler, timeout /* , ...arguments */) {
            var boundArgs = arguments.length > 2;
            var args = boundArgs ? slice.call(arguments, 2) : undefined;
            return scheduler(boundArgs ? function () {
                // eslint-disable-next-line no-new-func -- spec requirement
                (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
            } : handler, timeout);
        };
    };

    // ie9- setTimeout & setInterval additional parameters fix
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
    _export({ global: true, bind: true, forced: MSIE }, {
        // `setTimeout` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
        setTimeout: wrap(global_1.setTimeout),
        // `setInterval` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
        setInterval: wrap(global_1.setInterval)
    });

    var setTimeout$3 = path.setTimeout;

    var setTimeout$2 = setTimeout$3;

    var setTimeout$1 = setTimeout$2;

    /*
   * @Description: 防抖工具
   * @LastEditors: huliang54
   */

    /* eslint-disable */
    function throttle(delay, noTrailing, callback, debounceMode) {
        /*
         * After wrapper has stopped being called, this timeout ensures that
         * `callback` is executed at the proper times in `throttle` and `end`
         * debounce modes.
         */
        var timeoutID;
        var cancelled = false; // Keep track of the last time `callback` was executed.

        var lastExec = 0; // Function to clear existing timeout

        function clearExistingTimeout() {
            if (timeoutID) {
                clearTimeout(timeoutID);
            }
        } // Function to cancel next exec


        function cancel() {
            clearExistingTimeout();
            cancelled = true;
        } // `noTrailing` defaults to falsy.


        if (typeof noTrailing !== 'boolean') {
            debounceMode = callback;
            callback = noTrailing;
            noTrailing = undefined;
        }
        /*
         * The `wrapper` function encapsulates all of the throttling / debouncing
         * functionality and when executed will limit the rate at which `callback`
         * is executed.
         */


        function wrapper() {
            var _len = arguments.length;
            var arguments_ = new Array(_len);

            for (var _key = 0; _key < _len; _key++) {
                arguments_[_key] = arguments[_key];
            }

            var self = this;
            var elapsed = now() - lastExec;

            if (cancelled) {
                return;
            } // Execute `callback` and update the `lastExec` timestamp.


            function exec() {
                lastExec = now();
                callback.apply(self, arguments_);
            }
            /*
               * If `debounceMode` is true (at begin) this is used to clear the flag
               * to allow future `callback` executions.
               */


            function clear() {
                timeoutID = undefined;
            }

            if (debounceMode && !timeoutID) {
                /*
                     * Since `wrapper` is being called for the first time and
                     * `debounceMode` is true (at begin), execute `callback`.
                     */
                exec();
            }

            clearExistingTimeout();

            if (debounceMode === undefined && elapsed > delay) {
                /*
                     * In throttle mode, if `delay` time has been exceeded, execute
                     * `callback`.
                     */
                exec();
            } else if (noTrailing !== true) {
                /*
                     * In trailing throttle mode, since `delay` time has not been
                     * exceeded, schedule `callback` to execute `delay` ms after most
                     * recent execution.
                     *
                     * If `debounceMode` is true (at begin), schedule `clear` to execute
                     * after `delay` ms.
                     *
                     * If `debounceMode` is false (at end), schedule `callback` to
                     * execute after `delay` ms.
                     */
                timeoutID = setTimeout$1(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
            }
        }

        wrapper.cancel = cancel; // Return the wrapper function.

        return wrapper;
    }
    /* eslint-disable no-undefined */

    /**
     * Debounce execution of a function. Debouncing, unlike throttling,
     * guarantees that a function is only executed a single time, either at the
     * very beginning of a series of calls, or at the very end.
     *
     * @param  {number}   delay -         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
     * @param  {boolean}  [atBegin] -     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds
     *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.
     *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).
     * @param  {Function} callback -      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
     *                                  to `callback` when the debounced-function is executed.
     *
     * @returns {Function} A new, debounced function.
     */

    function debounce(delay, atBegin, callback) {
        return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);
    }

    var js_cookie = createCommonjsModule(function (module, exports) {
        (function (factory) {
            var registeredInModuleLoader;
            {
                module.exports = factory();
                registeredInModuleLoader = true;
            }
            if (!registeredInModuleLoader) {
                var OldCookies = window.Cookies;
                var api = window.Cookies = factory();
                api.noConflict = function () {
                    window.Cookies = OldCookies;
                    return api;
                };
            }
        }(function () {
            function extend () {
                var i = 0;
                var result = {};
                for (; i < arguments.length; i++) {
                    var attributes = arguments[ i ];
                    for (var key in attributes) {
                        result[key] = attributes[key];
                    }
                }
                return result;
            }

            function decode (s) {
                return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            }

            function init (converter) {
                function api() {}

                function set (key, value, attributes) {
                    if (typeof document === 'undefined') {
                        return;
                    }

                    attributes = extend({
                        path: '/'
                    }, api.defaults, attributes);

                    if (typeof attributes.expires === 'number') {
                        attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
                    }

                    // We're using "expires" because "max-age" is not supported by IE
                    attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

                    try {
                        var result = JSON.stringify(value);
                        if (/^[\{\[]/.test(result)) {
                            value = result;
                        }
                    } catch (e) {}

                    value = converter.write ?
                        converter.write(value, key) :
                        encodeURIComponent(String(value))
                            .replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

                    key = encodeURIComponent(String(key))
                        .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
                        .replace(/[\(\)]/g, escape);

                    var stringifiedAttributes = '';
                    for (var attributeName in attributes) {
                        if (!attributes[attributeName]) {
                            continue;
                        }
                        stringifiedAttributes += '; ' + attributeName;
                        if (attributes[attributeName] === true) {
                            continue;
                        }

                        // Considers RFC 6265 section 5.2:
                        // ...
                        // 3.  If the remaining unparsed-attributes contains a %x3B (";")
                        //     character:
                        // Consume the characters of the unparsed-attributes up to,
                        // not including, the first %x3B (";") character.
                        // ...
                        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
                    }

                    return (document.cookie = key + '=' + value + stringifiedAttributes);
                }

                function get (key, json) {
                    if (typeof document === 'undefined') {
                        return;
                    }

                    var jar = {};
                    // To prevent the for loop in the first place assign an empty array
                    // in case there are no cookies at all.
                    var cookies = document.cookie ? document.cookie.split('; ') : [];
                    var i = 0;

                    for (; i < cookies.length; i++) {
                        var parts = cookies[i].split('=');
                        var cookie = parts.slice(1).join('=');

                        if (!json && cookie.charAt(0) === '"') {
                            cookie = cookie.slice(1, -1);
                        }

                        try {
                            var name = decode(parts[0]);
                            cookie = (converter.read || converter)(cookie, name) ||
                                decode(cookie);

                            if (json) {
                                try {
                                    cookie = JSON.parse(cookie);
                                } catch (e) {}
                            }

                            jar[name] = cookie;

                            if (key === name) {
                                break;
                            }
                        } catch (e) {}
                    }

                    return key ? jar[key] : jar;
                }

                api.set = set;
                api.get = function (key) {
                    return get(key, false /* read as raw */);
                };
                api.getJSON = function (key) {
                    return get(key, true /* read as json */);
                };
                api.remove = function (key, attributes) {
                    set(key, '', extend(attributes, {
                        expires: -1
                    }));
                };

                api.defaults = {};

                api.withConverter = init;

                return api;
            }

            return init(function () {});
        }));
    });

    var Cookies = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), js_cookie, {
        'default': js_cookie
    }));

    var CookieUtil = /*#__PURE__*/function () {
        function CookieUtil() {
            _classCallCheck(this, CookieUtil);
        }

        _createClass(CookieUtil, null, [{
            key: "setCookies",
            value: function setCookies(key, value, extra) {
                return js_cookie.set(key, value, extra);
            }
        }, {
            key: "getCookies",
            value: function getCookies(key) {
                return js_cookie.get(key);
            }
        }, {
            key: "removeCookie",
            value: function removeCookie(key, extra) {
                js_cookie.remove(key, extra);
            }
        }, {
            key: "getClass",
            value: function getClass() {
                return Cookies;
            }
        }]);

        return CookieUtil;
    }();

    var $some = arrayIteration.some;


    var STRICT_METHOD = arrayMethodIsStrict('some');

    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    _export({ target: 'Array', proto: true, forced: !STRICT_METHOD }, {
        some: function some(callbackfn /* , thisArg */) {
            return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var some$2 = entryVirtual('Array').some;

    var ArrayPrototype$2 = Array.prototype;

    var some_1 = function (it) {
        var own = it.some;
        return it === ArrayPrototype$2 || (it instanceof Array && own === ArrayPrototype$2.some) ? some$2 : own;
    };

    var some$1 = some_1;

    var some = some$1;

    var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('splice');

    var max = Math.max;
    var min = Math.min;
    var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
    var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

    // `Array.prototype.splice` method
    // https://tc39.es/ecma262/#sec-array.prototype.splice
    // with adding support of @@species
    _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
        splice: function splice(start, deleteCount /* , ...items */) {
            var O = toObject(this);
            var len = toLength(O.length);
            var actualStart = toAbsoluteIndex(start, len);
            var argumentsLength = arguments.length;
            var insertCount, actualDeleteCount, A, k, from, to;
            if (argumentsLength === 0) {
                insertCount = actualDeleteCount = 0;
            } else if (argumentsLength === 1) {
                insertCount = 0;
                actualDeleteCount = len - actualStart;
            } else {
                insertCount = argumentsLength - 2;
                actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
            }
            if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
                throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
            }
            A = arraySpeciesCreate(O, actualDeleteCount);
            for (k = 0; k < actualDeleteCount; k++) {
                from = actualStart + k;
                if (from in O) createProperty(A, k, O[from]);
            }
            A.length = actualDeleteCount;
            if (insertCount < actualDeleteCount) {
                for (k = actualStart; k < len - actualDeleteCount; k++) {
                    from = k + actualDeleteCount;
                    to = k + insertCount;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                }
                for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
            } else if (insertCount > actualDeleteCount) {
                for (k = len - actualDeleteCount; k > actualStart; k--) {
                    from = k + actualDeleteCount - 1;
                    to = k + insertCount - 1;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                }
            }
            for (k = 0; k < insertCount; k++) {
                O[k + actualStart] = arguments[k + 2];
            }
            O.length = len - actualDeleteCount + insertCount;
            return A;
        }
    });

    var splice$2 = entryVirtual('Array').splice;

    var ArrayPrototype$1 = Array.prototype;

    var splice_1 = function (it) {
        var own = it.splice;
        return it === ArrayPrototype$1 || (it instanceof Array && own === ArrayPrototype$1.splice) ? splice$2 : own;
    };

    var splice$1 = splice_1;

    var splice = splice$1;

    var axios = createCommonjsModule(function (module, exports) {
        /* axios v0.21.1 | (c) 2020 by Matt Zabriskie */
        (function webpackUniversalModuleDefinition(root, factory) {
            module.exports = factory();
        })(commonjsGlobal, function() {
            return /******/ (function(modules) { // webpackBootstrap
                /******/ 	// The module cache
                /******/ 	var installedModules = {};
                /******/
                /******/ 	// The require function
                /******/ 	function __webpack_require__(moduleId) {
                    /******/
                    /******/ 		// Check if module is in cache
                    /******/ 		if(installedModules[moduleId])
                        /******/ 			return installedModules[moduleId].exports;
                    /******/
                    /******/ 		// Create a new module (and put it into the cache)
                    /******/ 		var module = installedModules[moduleId] = {
                        /******/ 			exports: {},
                        /******/ 			id: moduleId,
                        /******/ 			loaded: false
                        /******/ 		};
                    /******/
                    /******/ 		// Execute the module function
                    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                    /******/
                    /******/ 		// Flag the module as loaded
                    /******/ 		module.loaded = true;
                    /******/
                    /******/ 		// Return the exports of the module
                    /******/ 		return module.exports;
                    /******/ 	}
                /******/
                /******/
                /******/ 	// expose the modules object (__webpack_modules__)
                /******/ 	__webpack_require__.m = modules;
                /******/
                /******/ 	// expose the module cache
                /******/ 	__webpack_require__.c = installedModules;
                /******/
                /******/ 	// __webpack_public_path__
                /******/ 	__webpack_require__.p = "";
                /******/
                /******/ 	// Load entry module and return exports
                /******/ 	return __webpack_require__(0);
                /******/ })
                /************************************************************************/
                /******/ ([
                    /* 0 */
                    /***/ (function(module, exports, __webpack_require__) {

                        module.exports = __webpack_require__(1);

                        /***/ }),
                    /* 1 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);
                        var bind = __webpack_require__(3);
                        var Axios = __webpack_require__(4);
                        var mergeConfig = __webpack_require__(22);
                        var defaults = __webpack_require__(10);

                        /**
                         * Create an instance of Axios
                         *
                         * @param {Object} defaultConfig The default config for the instance
                         * @return {Axios} A new instance of Axios
                         */
                        function createInstance(defaultConfig) {
                            var context = new Axios(defaultConfig);
                            var instance = bind(Axios.prototype.request, context);

                            // Copy axios.prototype to instance
                            utils.extend(instance, Axios.prototype, context);

                            // Copy context to instance
                            utils.extend(instance, context);

                            return instance;
                        }

                        // Create the default instance to be exported
                        var axios = createInstance(defaults);

                        // Expose Axios class to allow class inheritance
                        axios.Axios = Axios;

                        // Factory for creating new instances
                        axios.create = function create(instanceConfig) {
                            return createInstance(mergeConfig(axios.defaults, instanceConfig));
                        };

                        // Expose Cancel & CancelToken
                        axios.Cancel = __webpack_require__(23);
                        axios.CancelToken = __webpack_require__(24);
                        axios.isCancel = __webpack_require__(9);

                        // Expose all/spread
                        axios.all = function all(promises) {
                            return Promise.all(promises);
                        };
                        axios.spread = __webpack_require__(25);

                        // Expose isAxiosError
                        axios.isAxiosError = __webpack_require__(26);

                        module.exports = axios;

                        // Allow use of default import syntax in TypeScript
                        module.exports.default = axios;


                        /***/ }),
                    /* 2 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var bind = __webpack_require__(3);

                        /*global toString:true*/

                        // utils is a library of generic helper functions non-specific to axios

                        var toString = Object.prototype.toString;

                        /**
                         * Determine if a value is an Array
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is an Array, otherwise false
                         */
                        function isArray(val) {
                            return toString.call(val) === '[object Array]';
                        }

                        /**
                         * Determine if a value is undefined
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if the value is undefined, otherwise false
                         */
                        function isUndefined(val) {
                            return typeof val === 'undefined';
                        }

                        /**
                         * Determine if a value is a Buffer
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a Buffer, otherwise false
                         */
                        function isBuffer(val) {
                            return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
                                && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
                        }

                        /**
                         * Determine if a value is an ArrayBuffer
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
                         */
                        function isArrayBuffer(val) {
                            return toString.call(val) === '[object ArrayBuffer]';
                        }

                        /**
                         * Determine if a value is a FormData
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is an FormData, otherwise false
                         */
                        function isFormData(val) {
                            return (typeof FormData !== 'undefined') && (val instanceof FormData);
                        }

                        /**
                         * Determine if a value is a view on an ArrayBuffer
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
                         */
                        function isArrayBufferView(val) {
                            var result;
                            if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                                result = ArrayBuffer.isView(val);
                            } else {
                                result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
                            }
                            return result;
                        }

                        /**
                         * Determine if a value is a String
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a String, otherwise false
                         */
                        function isString(val) {
                            return typeof val === 'string';
                        }

                        /**
                         * Determine if a value is a Number
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a Number, otherwise false
                         */
                        function isNumber(val) {
                            return typeof val === 'number';
                        }

                        /**
                         * Determine if a value is an Object
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is an Object, otherwise false
                         */
                        function isObject(val) {
                            return val !== null && typeof val === 'object';
                        }

                        /**
                         * Determine if a value is a plain Object
                         *
                         * @param {Object} val The value to test
                         * @return {boolean} True if value is a plain Object, otherwise false
                         */
                        function isPlainObject(val) {
                            if (toString.call(val) !== '[object Object]') {
                                return false;
                            }

                            var prototype = Object.getPrototypeOf(val);
                            return prototype === null || prototype === Object.prototype;
                        }

                        /**
                         * Determine if a value is a Date
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a Date, otherwise false
                         */
                        function isDate(val) {
                            return toString.call(val) === '[object Date]';
                        }

                        /**
                         * Determine if a value is a File
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a File, otherwise false
                         */
                        function isFile(val) {
                            return toString.call(val) === '[object File]';
                        }

                        /**
                         * Determine if a value is a Blob
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a Blob, otherwise false
                         */
                        function isBlob(val) {
                            return toString.call(val) === '[object Blob]';
                        }

                        /**
                         * Determine if a value is a Function
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a Function, otherwise false
                         */
                        function isFunction(val) {
                            return toString.call(val) === '[object Function]';
                        }

                        /**
                         * Determine if a value is a Stream
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a Stream, otherwise false
                         */
                        function isStream(val) {
                            return isObject(val) && isFunction(val.pipe);
                        }

                        /**
                         * Determine if a value is a URLSearchParams object
                         *
                         * @param {Object} val The value to test
                         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
                         */
                        function isURLSearchParams(val) {
                            return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
                        }

                        /**
                         * Trim excess whitespace off the beginning and end of a string
                         *
                         * @param {String} str The String to trim
                         * @returns {String} The String freed of excess whitespace
                         */
                        function trim(str) {
                            return str.replace(/^\s*/, '').replace(/\s*$/, '');
                        }

                        /**
                         * Determine if we're running in a standard browser environment
                         *
                         * This allows axios to run in a web worker, and react-native.
                         * Both environments support XMLHttpRequest, but not fully standard globals.
                         *
                         * web workers:
                         *  typeof window -> undefined
                         *  typeof document -> undefined
                         *
                         * react-native:
                         *  navigator.product -> 'ReactNative'
                         * nativescript
                         *  navigator.product -> 'NativeScript' or 'NS'
                         */
                        function isStandardBrowserEnv() {
                            if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                navigator.product === 'NativeScript' ||
                                navigator.product === 'NS')) {
                                return false;
                            }
                            return (
                                typeof window !== 'undefined' &&
                                typeof document !== 'undefined'
                            );
                        }

                        /**
                         * Iterate over an Array or an Object invoking a function for each item.
                         *
                         * If `obj` is an Array callback will be called passing
                         * the value, index, and complete array for each item.
                         *
                         * If 'obj' is an Object callback will be called passing
                         * the value, key, and complete object for each property.
                         *
                         * @param {Object|Array} obj The object to iterate
                         * @param {Function} fn The callback to invoke for each item
                         */
                        function forEach(obj, fn) {
                            // Don't bother if no value provided
                            if (obj === null || typeof obj === 'undefined') {
                                return;
                            }

                            // Force an array if not already something iterable
                            if (typeof obj !== 'object') {
                                /*eslint no-param-reassign:0*/
                                obj = [obj];
                            }

                            if (isArray(obj)) {
                                // Iterate over array values
                                for (var i = 0, l = obj.length; i < l; i++) {
                                    fn.call(null, obj[i], i, obj);
                                }
                            } else {
                                // Iterate over object keys
                                for (var key in obj) {
                                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                                        fn.call(null, obj[key], key, obj);
                                    }
                                }
                            }
                        }

                        /**
                         * Accepts varargs expecting each argument to be an object, then
                         * immutably merges the properties of each object and returns result.
                         *
                         * When multiple objects contain the same key the later object in
                         * the arguments list will take precedence.
                         *
                         * Example:
                         *
                         * ```js
                         * var result = merge({foo: 123}, {foo: 456});
                         * console.log(result.foo); // outputs 456
                         * ```
                         *
                         * @param {Object} obj1 Object to merge
                         * @returns {Object} Result of all merge properties
                         */
                        function merge(/* obj1, obj2, obj3, ... */) {
                            var result = {};
                            function assignValue(val, key) {
                                if (isPlainObject(result[key]) && isPlainObject(val)) {
                                    result[key] = merge(result[key], val);
                                } else if (isPlainObject(val)) {
                                    result[key] = merge({}, val);
                                } else if (isArray(val)) {
                                    result[key] = val.slice();
                                } else {
                                    result[key] = val;
                                }
                            }

                            for (var i = 0, l = arguments.length; i < l; i++) {
                                forEach(arguments[i], assignValue);
                            }
                            return result;
                        }

                        /**
                         * Extends object a by mutably adding to it the properties of object b.
                         *
                         * @param {Object} a The object to be extended
                         * @param {Object} b The object to copy properties from
                         * @param {Object} thisArg The object to bind function to
                         * @return {Object} The resulting value of object a
                         */
                        function extend(a, b, thisArg) {
                            forEach(b, function assignValue(val, key) {
                                if (thisArg && typeof val === 'function') {
                                    a[key] = bind(val, thisArg);
                                } else {
                                    a[key] = val;
                                }
                            });
                            return a;
                        }

                        /**
                         * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
                         *
                         * @param {string} content with BOM
                         * @return {string} content value without BOM
                         */
                        function stripBOM(content) {
                            if (content.charCodeAt(0) === 0xFEFF) {
                                content = content.slice(1);
                            }
                            return content;
                        }

                        module.exports = {
                            isArray: isArray,
                            isArrayBuffer: isArrayBuffer,
                            isBuffer: isBuffer,
                            isFormData: isFormData,
                            isArrayBufferView: isArrayBufferView,
                            isString: isString,
                            isNumber: isNumber,
                            isObject: isObject,
                            isPlainObject: isPlainObject,
                            isUndefined: isUndefined,
                            isDate: isDate,
                            isFile: isFile,
                            isBlob: isBlob,
                            isFunction: isFunction,
                            isStream: isStream,
                            isURLSearchParams: isURLSearchParams,
                            isStandardBrowserEnv: isStandardBrowserEnv,
                            forEach: forEach,
                            merge: merge,
                            extend: extend,
                            trim: trim,
                            stripBOM: stripBOM
                        };


                        /***/ }),
                    /* 3 */
                    /***/ (function(module, exports) {

                        module.exports = function bind(fn, thisArg) {
                            return function wrap() {
                                var args = new Array(arguments.length);
                                for (var i = 0; i < args.length; i++) {
                                    args[i] = arguments[i];
                                }
                                return fn.apply(thisArg, args);
                            };
                        };


                        /***/ }),
                    /* 4 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);
                        var buildURL = __webpack_require__(5);
                        var InterceptorManager = __webpack_require__(6);
                        var dispatchRequest = __webpack_require__(7);
                        var mergeConfig = __webpack_require__(22);

                        /**
                         * Create a new instance of Axios
                         *
                         * @param {Object} instanceConfig The default config for the instance
                         */
                        function Axios(instanceConfig) {
                            this.defaults = instanceConfig;
                            this.interceptors = {
                                request: new InterceptorManager(),
                                response: new InterceptorManager()
                            };
                        }

                        /**
                         * Dispatch a request
                         *
                         * @param {Object} config The config specific for this request (merged with this.defaults)
                         */
                        Axios.prototype.request = function request(config) {
                            /*eslint no-param-reassign:0*/
                            // Allow for axios('example/url'[, config]) a la fetch API
                            if (typeof config === 'string') {
                                config = arguments[1] || {};
                                config.url = arguments[0];
                            } else {
                                config = config || {};
                            }

                            config = mergeConfig(this.defaults, config);

                            // Set config.method
                            if (config.method) {
                                config.method = config.method.toLowerCase();
                            } else if (this.defaults.method) {
                                config.method = this.defaults.method.toLowerCase();
                            } else {
                                config.method = 'get';
                            }

                            // Hook up interceptors middleware
                            var chain = [dispatchRequest, undefined];
                            var promise = Promise.resolve(config);

                            this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                                chain.unshift(interceptor.fulfilled, interceptor.rejected);
                            });

                            this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                                chain.push(interceptor.fulfilled, interceptor.rejected);
                            });

                            while (chain.length) {
                                promise = promise.then(chain.shift(), chain.shift());
                            }

                            return promise;
                        };

                        Axios.prototype.getUri = function getUri(config) {
                            config = mergeConfig(this.defaults, config);
                            return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
                        };

                        // Provide aliases for supported request methods
                        utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
                            /*eslint func-names:0*/
                            Axios.prototype[method] = function(url, config) {
                                return this.request(mergeConfig(config || {}, {
                                    method: method,
                                    url: url,
                                    data: (config || {}).data
                                }));
                            };
                        });

                        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                            /*eslint func-names:0*/
                            Axios.prototype[method] = function(url, data, config) {
                                return this.request(mergeConfig(config || {}, {
                                    method: method,
                                    url: url,
                                    data: data
                                }));
                            };
                        });

                        module.exports = Axios;


                        /***/ }),
                    /* 5 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);

                        function encode(val) {
                            return encodeURIComponent(val).
                            replace(/%3A/gi, ':').
                            replace(/%24/g, '$').
                            replace(/%2C/gi, ',').
                            replace(/%20/g, '+').
                            replace(/%5B/gi, '[').
                            replace(/%5D/gi, ']');
                        }

                        /**
                         * Build a URL by appending params to the end
                         *
                         * @param {string} url The base of the url (e.g., http://www.google.com)
                         * @param {object} [params] The params to be appended
                         * @returns {string} The formatted url
                         */
                        module.exports = function buildURL(url, params, paramsSerializer) {
                            /*eslint no-param-reassign:0*/
                            if (!params) {
                                return url;
                            }

                            var serializedParams;
                            if (paramsSerializer) {
                                serializedParams = paramsSerializer(params);
                            } else if (utils.isURLSearchParams(params)) {
                                serializedParams = params.toString();
                            } else {
                                var parts = [];

                                utils.forEach(params, function serialize(val, key) {
                                    if (val === null || typeof val === 'undefined') {
                                        return;
                                    }

                                    if (utils.isArray(val)) {
                                        key = key + '[]';
                                    } else {
                                        val = [val];
                                    }

                                    utils.forEach(val, function parseValue(v) {
                                        if (utils.isDate(v)) {
                                            v = v.toISOString();
                                        } else if (utils.isObject(v)) {
                                            v = JSON.stringify(v);
                                        }
                                        parts.push(encode(key) + '=' + encode(v));
                                    });
                                });

                                serializedParams = parts.join('&');
                            }

                            if (serializedParams) {
                                var hashmarkIndex = url.indexOf('#');
                                if (hashmarkIndex !== -1) {
                                    url = url.slice(0, hashmarkIndex);
                                }

                                url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
                            }

                            return url;
                        };


                        /***/ }),
                    /* 6 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);

                        function InterceptorManager() {
                            this.handlers = [];
                        }

                        /**
                         * Add a new interceptor to the stack
                         *
                         * @param {Function} fulfilled The function to handle `then` for a `Promise`
                         * @param {Function} rejected The function to handle `reject` for a `Promise`
                         *
                         * @return {Number} An ID used to remove interceptor later
                         */
                        InterceptorManager.prototype.use = function use(fulfilled, rejected) {
                            this.handlers.push({
                                fulfilled: fulfilled,
                                rejected: rejected
                            });
                            return this.handlers.length - 1;
                        };

                        /**
                         * Remove an interceptor from the stack
                         *
                         * @param {Number} id The ID that was returned by `use`
                         */
                        InterceptorManager.prototype.eject = function eject(id) {
                            if (this.handlers[id]) {
                                this.handlers[id] = null;
                            }
                        };

                        /**
                         * Iterate over all the registered interceptors
                         *
                         * This method is particularly useful for skipping over any
                         * interceptors that may have become `null` calling `eject`.
                         *
                         * @param {Function} fn The function to call for each interceptor
                         */
                        InterceptorManager.prototype.forEach = function forEach(fn) {
                            utils.forEach(this.handlers, function forEachHandler(h) {
                                if (h !== null) {
                                    fn(h);
                                }
                            });
                        };

                        module.exports = InterceptorManager;


                        /***/ }),
                    /* 7 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);
                        var transformData = __webpack_require__(8);
                        var isCancel = __webpack_require__(9);
                        var defaults = __webpack_require__(10);

                        /**
                         * Throws a `Cancel` if cancellation has been requested.
                         */
                        function throwIfCancellationRequested(config) {
                            if (config.cancelToken) {
                                config.cancelToken.throwIfRequested();
                            }
                        }

                        /**
                         * Dispatch a request to the server using the configured adapter.
                         *
                         * @param {object} config The config that is to be used for the request
                         * @returns {Promise} The Promise to be fulfilled
                         */
                        module.exports = function dispatchRequest(config) {
                            throwIfCancellationRequested(config);

                            // Ensure headers exist
                            config.headers = config.headers || {};

                            // Transform request data
                            config.data = transformData(
                                config.data,
                                config.headers,
                                config.transformRequest
                            );

                            // Flatten headers
                            config.headers = utils.merge(
                                config.headers.common || {},
                                config.headers[config.method] || {},
                                config.headers
                            );

                            utils.forEach(
                                ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                                function cleanHeaderConfig(method) {
                                    delete config.headers[method];
                                }
                            );

                            var adapter = config.adapter || defaults.adapter;

                            return adapter(config).then(function onAdapterResolution(response) {
                                throwIfCancellationRequested(config);

                                // Transform response data
                                response.data = transformData(
                                    response.data,
                                    response.headers,
                                    config.transformResponse
                                );

                                return response;
                            }, function onAdapterRejection(reason) {
                                if (!isCancel(reason)) {
                                    throwIfCancellationRequested(config);

                                    // Transform response data
                                    if (reason && reason.response) {
                                        reason.response.data = transformData(
                                            reason.response.data,
                                            reason.response.headers,
                                            config.transformResponse
                                        );
                                    }
                                }

                                return Promise.reject(reason);
                            });
                        };


                        /***/ }),
                    /* 8 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);

                        /**
                         * Transform the data for a request or a response
                         *
                         * @param {Object|String} data The data to be transformed
                         * @param {Array} headers The headers for the request or response
                         * @param {Array|Function} fns A single function or Array of functions
                         * @returns {*} The resulting transformed data
                         */
                        module.exports = function transformData(data, headers, fns) {
                            /*eslint no-param-reassign:0*/
                            utils.forEach(fns, function transform(fn) {
                                data = fn(data, headers);
                            });

                            return data;
                        };


                        /***/ }),
                    /* 9 */
                    /***/ (function(module, exports) {

                        module.exports = function isCancel(value) {
                            return !!(value && value.__CANCEL__);
                        };


                        /***/ }),
                    /* 10 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);
                        var normalizeHeaderName = __webpack_require__(11);

                        var DEFAULT_CONTENT_TYPE = {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        };

                        function setContentTypeIfUnset(headers, value) {
                            if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                                headers['Content-Type'] = value;
                            }
                        }

                        function getDefaultAdapter() {
                            var adapter;
                            if (typeof XMLHttpRequest !== 'undefined') {
                                // For browsers use XHR adapter
                                adapter = __webpack_require__(12);
                            } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                                // For node use HTTP adapter
                                adapter = __webpack_require__(12);
                            }
                            return adapter;
                        }

                        var defaults = {
                            adapter: getDefaultAdapter(),

                            transformRequest: [function transformRequest(data, headers) {
                                normalizeHeaderName(headers, 'Accept');
                                normalizeHeaderName(headers, 'Content-Type');
                                if (utils.isFormData(data) ||
                                    utils.isArrayBuffer(data) ||
                                    utils.isBuffer(data) ||
                                    utils.isStream(data) ||
                                    utils.isFile(data) ||
                                    utils.isBlob(data)
                                ) {
                                    return data;
                                }
                                if (utils.isArrayBufferView(data)) {
                                    return data.buffer;
                                }
                                if (utils.isURLSearchParams(data)) {
                                    setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                                    return data.toString();
                                }
                                if (utils.isObject(data)) {
                                    setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                                    return JSON.stringify(data);
                                }
                                return data;
                            }],

                            transformResponse: [function transformResponse(data) {
                                /*eslint no-param-reassign:0*/
                                if (typeof data === 'string') {
                                    try {
                                        data = JSON.parse(data);
                                    } catch (e) { /* Ignore */ }
                                }
                                return data;
                            }],

                            /**
                             * A timeout in milliseconds to abort a request. If set to 0 (default) a
                             * timeout is not created.
                             */
                            timeout: 0,

                            xsrfCookieName: 'XSRF-TOKEN',
                            xsrfHeaderName: 'X-XSRF-TOKEN',

                            maxContentLength: -1,
                            maxBodyLength: -1,

                            validateStatus: function validateStatus(status) {
                                return status >= 200 && status < 300;
                            }
                        };

                        defaults.headers = {
                            common: {
                                'Accept': 'application/json, text/plain, */*'
                            }
                        };

                        utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
                            defaults.headers[method] = {};
                        });

                        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                            defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
                        });

                        module.exports = defaults;


                        /***/ }),
                    /* 11 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);

                        module.exports = function normalizeHeaderName(headers, normalizedName) {
                            utils.forEach(headers, function processHeader(value, name) {
                                if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                                    headers[normalizedName] = value;
                                    delete headers[name];
                                }
                            });
                        };


                        /***/ }),
                    /* 12 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);
                        var settle = __webpack_require__(13);
                        var cookies = __webpack_require__(16);
                        var buildURL = __webpack_require__(5);
                        var buildFullPath = __webpack_require__(17);
                        var parseHeaders = __webpack_require__(20);
                        var isURLSameOrigin = __webpack_require__(21);
                        var createError = __webpack_require__(14);

                        module.exports = function xhrAdapter(config) {
                            return new Promise(function dispatchXhrRequest(resolve, reject) {
                                var requestData = config.data;
                                var requestHeaders = config.headers;

                                if (utils.isFormData(requestData)) {
                                    delete requestHeaders['Content-Type']; // Let the browser set it
                                }

                                var request = new XMLHttpRequest();

                                // HTTP basic authentication
                                if (config.auth) {
                                    var username = config.auth.username || '';
                                    var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
                                    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                                }

                                var fullPath = buildFullPath(config.baseURL, config.url);
                                request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

                                // Set the request timeout in MS
                                request.timeout = config.timeout;

                                // Listen for ready state
                                request.onreadystatechange = function handleLoad() {
                                    if (!request || request.readyState !== 4) {
                                        return;
                                    }

                                    // The request errored out and we didn't get a response, this will be
                                    // handled by onerror instead
                                    // With one exception: request that using file: protocol, most browsers
                                    // will return status as 0 even though it's a successful request
                                    if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                                        return;
                                    }

                                    // Prepare the response
                                    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                                    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
                                    var response = {
                                        data: responseData,
                                        status: request.status,
                                        statusText: request.statusText,
                                        headers: responseHeaders,
                                        config: config,
                                        request: request
                                    };

                                    settle(resolve, reject, response);

                                    // Clean up request
                                    request = null;
                                };

                                // Handle browser request cancellation (as opposed to a manual cancellation)
                                request.onabort = function handleAbort() {
                                    if (!request) {
                                        return;
                                    }

                                    reject(createError('Request aborted', config, 'ECONNABORTED', request));

                                    // Clean up request
                                    request = null;
                                };

                                // Handle low level network errors
                                request.onerror = function handleError() {
                                    // Real errors are hidden from us by the browser
                                    // onerror should only fire if it's a network error
                                    reject(createError('Network Error', config, null, request));

                                    // Clean up request
                                    request = null;
                                };

                                // Handle timeout
                                request.ontimeout = function handleTimeout() {
                                    var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
                                    if (config.timeoutErrorMessage) {
                                        timeoutErrorMessage = config.timeoutErrorMessage;
                                    }
                                    reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
                                        request));

                                    // Clean up request
                                    request = null;
                                };

                                // Add xsrf header
                                // This is only done if running in a standard browser environment.
                                // Specifically not if we're in a web worker, or react-native.
                                if (utils.isStandardBrowserEnv()) {
                                    // Add xsrf header
                                    var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
                                        cookies.read(config.xsrfCookieName) :
                                        undefined;

                                    if (xsrfValue) {
                                        requestHeaders[config.xsrfHeaderName] = xsrfValue;
                                    }
                                }

                                // Add headers to the request
                                if ('setRequestHeader' in request) {
                                    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                                        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                                            // Remove Content-Type if data is undefined
                                            delete requestHeaders[key];
                                        } else {
                                            // Otherwise add header to the request
                                            request.setRequestHeader(key, val);
                                        }
                                    });
                                }

                                // Add withCredentials to request if needed
                                if (!utils.isUndefined(config.withCredentials)) {
                                    request.withCredentials = !!config.withCredentials;
                                }

                                // Add responseType to request if needed
                                if (config.responseType) {
                                    try {
                                        request.responseType = config.responseType;
                                    } catch (e) {
                                        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                                        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                                        if (config.responseType !== 'json') {
                                            throw e;
                                        }
                                    }
                                }

                                // Handle progress if needed
                                if (typeof config.onDownloadProgress === 'function') {
                                    request.addEventListener('progress', config.onDownloadProgress);
                                }

                                // Not all browsers support upload events
                                if (typeof config.onUploadProgress === 'function' && request.upload) {
                                    request.upload.addEventListener('progress', config.onUploadProgress);
                                }

                                if (config.cancelToken) {
                                    // Handle cancellation
                                    config.cancelToken.promise.then(function onCanceled(cancel) {
                                        if (!request) {
                                            return;
                                        }

                                        request.abort();
                                        reject(cancel);
                                        // Clean up request
                                        request = null;
                                    });
                                }

                                if (!requestData) {
                                    requestData = null;
                                }

                                // Send the request
                                request.send(requestData);
                            });
                        };


                        /***/ }),
                    /* 13 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var createError = __webpack_require__(14);

                        /**
                         * Resolve or reject a Promise based on response status.
                         *
                         * @param {Function} resolve A function that resolves the promise.
                         * @param {Function} reject A function that rejects the promise.
                         * @param {object} response The response.
                         */
                        module.exports = function settle(resolve, reject, response) {
                            var validateStatus = response.config.validateStatus;
                            if (!response.status || !validateStatus || validateStatus(response.status)) {
                                resolve(response);
                            } else {
                                reject(createError(
                                    'Request failed with status code ' + response.status,
                                    response.config,
                                    null,
                                    response.request,
                                    response
                                ));
                            }
                        };


                        /***/ }),
                    /* 14 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var enhanceError = __webpack_require__(15);

                        /**
                         * Create an Error with the specified message, config, error code, request and response.
                         *
                         * @param {string} message The error message.
                         * @param {Object} config The config.
                         * @param {string} [code] The error code (for example, 'ECONNABORTED').
                         * @param {Object} [request] The request.
                         * @param {Object} [response] The response.
                         * @returns {Error} The created error.
                         */
                        module.exports = function createError(message, config, code, request, response) {
                            var error = new Error(message);
                            return enhanceError(error, config, code, request, response);
                        };


                        /***/ }),
                    /* 15 */
                    /***/ (function(module, exports) {

                        /**
                         * Update an Error with the specified config, error code, and response.
                         *
                         * @param {Error} error The error to update.
                         * @param {Object} config The config.
                         * @param {string} [code] The error code (for example, 'ECONNABORTED').
                         * @param {Object} [request] The request.
                         * @param {Object} [response] The response.
                         * @returns {Error} The error.
                         */
                        module.exports = function enhanceError(error, config, code, request, response) {
                            error.config = config;
                            if (code) {
                                error.code = code;
                            }

                            error.request = request;
                            error.response = response;
                            error.isAxiosError = true;

                            error.toJSON = function toJSON() {
                                return {
                                    // Standard
                                    message: this.message,
                                    name: this.name,
                                    // Microsoft
                                    description: this.description,
                                    number: this.number,
                                    // Mozilla
                                    fileName: this.fileName,
                                    lineNumber: this.lineNumber,
                                    columnNumber: this.columnNumber,
                                    stack: this.stack,
                                    // Axios
                                    config: this.config,
                                    code: this.code
                                };
                            };
                            return error;
                        };


                        /***/ }),
                    /* 16 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);

                        module.exports = (
                            utils.isStandardBrowserEnv() ?

                                // Standard browser envs support document.cookie
                                (function standardBrowserEnv() {
                                    return {
                                        write: function write(name, value, expires, path, domain, secure) {
                                            var cookie = [];
                                            cookie.push(name + '=' + encodeURIComponent(value));

                                            if (utils.isNumber(expires)) {
                                                cookie.push('expires=' + new Date(expires).toGMTString());
                                            }

                                            if (utils.isString(path)) {
                                                cookie.push('path=' + path);
                                            }

                                            if (utils.isString(domain)) {
                                                cookie.push('domain=' + domain);
                                            }

                                            if (secure === true) {
                                                cookie.push('secure');
                                            }

                                            document.cookie = cookie.join('; ');
                                        },

                                        read: function read(name) {
                                            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                                            return (match ? decodeURIComponent(match[3]) : null);
                                        },

                                        remove: function remove(name) {
                                            this.write(name, '', Date.now() - 86400000);
                                        }
                                    };
                                })() :

                                // Non standard browser env (web workers, react-native) lack needed support.
                                (function nonStandardBrowserEnv() {
                                    return {
                                        write: function write() {},
                                        read: function read() { return null; },
                                        remove: function remove() {}
                                    };
                                })()
                        );


                        /***/ }),
                    /* 17 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var isAbsoluteURL = __webpack_require__(18);
                        var combineURLs = __webpack_require__(19);

                        /**
                         * Creates a new URL by combining the baseURL with the requestedURL,
                         * only when the requestedURL is not already an absolute URL.
                         * If the requestURL is absolute, this function returns the requestedURL untouched.
                         *
                         * @param {string} baseURL The base URL
                         * @param {string} requestedURL Absolute or relative URL to combine
                         * @returns {string} The combined full path
                         */
                        module.exports = function buildFullPath(baseURL, requestedURL) {
                            if (baseURL && !isAbsoluteURL(requestedURL)) {
                                return combineURLs(baseURL, requestedURL);
                            }
                            return requestedURL;
                        };


                        /***/ }),
                    /* 18 */
                    /***/ (function(module, exports) {

                        /**
                         * Determines whether the specified URL is absolute
                         *
                         * @param {string} url The URL to test
                         * @returns {boolean} True if the specified URL is absolute, otherwise false
                         */
                        module.exports = function isAbsoluteURL(url) {
                            // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
                            // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
                            // by any combination of letters, digits, plus, period, or hyphen.
                            return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
                        };


                        /***/ }),
                    /* 19 */
                    /***/ (function(module, exports) {

                        /**
                         * Creates a new URL by combining the specified URLs
                         *
                         * @param {string} baseURL The base URL
                         * @param {string} relativeURL The relative URL
                         * @returns {string} The combined URL
                         */
                        module.exports = function combineURLs(baseURL, relativeURL) {
                            return relativeURL
                                ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                                : baseURL;
                        };


                        /***/ }),
                    /* 20 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);

                        // Headers whose duplicates are ignored by node
                        // c.f. https://nodejs.org/api/http.html#http_message_headers
                        var ignoreDuplicateOf = [
                            'age', 'authorization', 'content-length', 'content-type', 'etag',
                            'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
                            'last-modified', 'location', 'max-forwards', 'proxy-authorization',
                            'referer', 'retry-after', 'user-agent'
                        ];

                        /**
                         * Parse headers into an object
                         *
                         * ```
                         * Date: Wed, 27 Aug 2014 08:58:49 GMT
                         * Content-Type: application/json
                         * Connection: keep-alive
                         * Transfer-Encoding: chunked
                         * ```
                         *
                         * @param {String} headers Headers needing to be parsed
                         * @returns {Object} Headers parsed into an object
                         */
                        module.exports = function parseHeaders(headers) {
                            var parsed = {};
                            var key;
                            var val;
                            var i;

                            if (!headers) { return parsed; }

                            utils.forEach(headers.split('\n'), function parser(line) {
                                i = line.indexOf(':');
                                key = utils.trim(line.substr(0, i)).toLowerCase();
                                val = utils.trim(line.substr(i + 1));

                                if (key) {
                                    if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                                        return;
                                    }
                                    if (key === 'set-cookie') {
                                        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                                    } else {
                                        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                                    }
                                }
                            });

                            return parsed;
                        };


                        /***/ }),
                    /* 21 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);

                        module.exports = (
                            utils.isStandardBrowserEnv() ?

                                // Standard browser envs have full support of the APIs needed to test
                                // whether the request URL is of the same origin as current location.
                                (function standardBrowserEnv() {
                                    var msie = /(msie|trident)/i.test(navigator.userAgent);
                                    var urlParsingNode = document.createElement('a');
                                    var originURL;

                                    /**
                                     * Parse a URL to discover it's components
                                     *
                                     * @param {String} url The URL to be parsed
                                     * @returns {Object}
                                     */
                                    function resolveURL(url) {
                                        var href = url;

                                        if (msie) {
                                            // IE needs attribute set twice to normalize properties
                                            urlParsingNode.setAttribute('href', href);
                                            href = urlParsingNode.href;
                                        }

                                        urlParsingNode.setAttribute('href', href);

                                        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                                        return {
                                            href: urlParsingNode.href,
                                            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                                            host: urlParsingNode.host,
                                            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                                            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                                            hostname: urlParsingNode.hostname,
                                            port: urlParsingNode.port,
                                            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                                urlParsingNode.pathname :
                                                '/' + urlParsingNode.pathname
                                        };
                                    }

                                    originURL = resolveURL(window.location.href);

                                    /**
                                     * Determine if a URL shares the same origin as the current location
                                     *
                                     * @param {String} requestURL The URL to test
                                     * @returns {boolean} True if URL shares the same origin, otherwise false
                                     */
                                    return function isURLSameOrigin(requestURL) {
                                        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                                        return (parsed.protocol === originURL.protocol &&
                                            parsed.host === originURL.host);
                                    };
                                })() :

                                // Non standard browser envs (web workers, react-native) lack needed support.
                                (function nonStandardBrowserEnv() {
                                    return function isURLSameOrigin() {
                                        return true;
                                    };
                                })()
                        );


                        /***/ }),
                    /* 22 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var utils = __webpack_require__(2);

                        /**
                         * Config-specific merge-function which creates a new config-object
                         * by merging two configuration objects together.
                         *
                         * @param {Object} config1
                         * @param {Object} config2
                         * @returns {Object} New object resulting from merging config2 to config1
                         */
                        module.exports = function mergeConfig(config1, config2) {
                            // eslint-disable-next-line no-param-reassign
                            config2 = config2 || {};
                            var config = {};

                            var valueFromConfig2Keys = ['url', 'method', 'data'];
                            var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
                            var defaultToConfig2Keys = [
                                'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
                                'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
                                'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
                                'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
                                'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
                            ];
                            var directMergeKeys = ['validateStatus'];

                            function getMergedValue(target, source) {
                                if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
                                    return utils.merge(target, source);
                                } else if (utils.isPlainObject(source)) {
                                    return utils.merge({}, source);
                                } else if (utils.isArray(source)) {
                                    return source.slice();
                                }
                                return source;
                            }

                            function mergeDeepProperties(prop) {
                                if (!utils.isUndefined(config2[prop])) {
                                    config[prop] = getMergedValue(config1[prop], config2[prop]);
                                } else if (!utils.isUndefined(config1[prop])) {
                                    config[prop] = getMergedValue(undefined, config1[prop]);
                                }
                            }

                            utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
                                if (!utils.isUndefined(config2[prop])) {
                                    config[prop] = getMergedValue(undefined, config2[prop]);
                                }
                            });

                            utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

                            utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
                                if (!utils.isUndefined(config2[prop])) {
                                    config[prop] = getMergedValue(undefined, config2[prop]);
                                } else if (!utils.isUndefined(config1[prop])) {
                                    config[prop] = getMergedValue(undefined, config1[prop]);
                                }
                            });

                            utils.forEach(directMergeKeys, function merge(prop) {
                                if (prop in config2) {
                                    config[prop] = getMergedValue(config1[prop], config2[prop]);
                                } else if (prop in config1) {
                                    config[prop] = getMergedValue(undefined, config1[prop]);
                                }
                            });

                            var axiosKeys = valueFromConfig2Keys
                                .concat(mergeDeepPropertiesKeys)
                                .concat(defaultToConfig2Keys)
                                .concat(directMergeKeys);

                            var otherKeys = Object
                                .keys(config1)
                                .concat(Object.keys(config2))
                                .filter(function filterAxiosKeys(key) {
                                    return axiosKeys.indexOf(key) === -1;
                                });

                            utils.forEach(otherKeys, mergeDeepProperties);

                            return config;
                        };


                        /***/ }),
                    /* 23 */
                    /***/ (function(module, exports) {

                        /**
                         * A `Cancel` is an object that is thrown when an operation is canceled.
                         *
                         * @class
                         * @param {string=} message The message.
                         */
                        function Cancel(message) {
                            this.message = message;
                        }

                        Cancel.prototype.toString = function toString() {
                            return 'Cancel' + (this.message ? ': ' + this.message : '');
                        };

                        Cancel.prototype.__CANCEL__ = true;

                        module.exports = Cancel;


                        /***/ }),
                    /* 24 */
                    /***/ (function(module, exports, __webpack_require__) {

                        var Cancel = __webpack_require__(23);

                        /**
                         * A `CancelToken` is an object that can be used to request cancellation of an operation.
                         *
                         * @class
                         * @param {Function} executor The executor function.
                         */
                        function CancelToken(executor) {
                            if (typeof executor !== 'function') {
                                throw new TypeError('executor must be a function.');
                            }

                            var resolvePromise;
                            this.promise = new Promise(function promiseExecutor(resolve) {
                                resolvePromise = resolve;
                            });

                            var token = this;
                            executor(function cancel(message) {
                                if (token.reason) {
                                    // Cancellation has already been requested
                                    return;
                                }

                                token.reason = new Cancel(message);
                                resolvePromise(token.reason);
                            });
                        }

                        /**
                         * Throws a `Cancel` if cancellation has been requested.
                         */
                        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
                            if (this.reason) {
                                throw this.reason;
                            }
                        };

                        /**
                         * Returns an object that contains a new `CancelToken` and a function that, when called,
                         * cancels the `CancelToken`.
                         */
                        CancelToken.source = function source() {
                            var cancel;
                            var token = new CancelToken(function executor(c) {
                                cancel = c;
                            });
                            return {
                                token: token,
                                cancel: cancel
                            };
                        };

                        module.exports = CancelToken;


                        /***/ }),
                    /* 25 */
                    /***/ (function(module, exports) {

                        /**
                         * Syntactic sugar for invoking a function and expanding an array for arguments.
                         *
                         * Common use case would be to use `Function.prototype.apply`.
                         *
                         *  ```js
                         *  function f(x, y, z) {}
                         *  var args = [1, 2, 3];
                         *  f.apply(null, args);
                         *  ```
                         *
                         * With `spread` this example can be re-written.
                         *
                         *  ```js
                         *  spread(function(x, y, z) {})([1, 2, 3]);
                         *  ```
                         *
                         * @param {Function} callback
                         * @returns {Function}
                         */
                        module.exports = function spread(callback) {
                            return function wrap(arr) {
                                return callback.apply(null, arr);
                            };
                        };


                        /***/ }),
                    /* 26 */
                    /***/ (function(module, exports) {

                        /**
                         * Determines whether the payload is an error thrown by Axios
                         *
                         * @param {*} payload The value to test
                         * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
                         */
                        module.exports = function isAxiosError(payload) {
                            return (typeof payload === 'object') && (payload.isAxiosError === true);
                        };


                        /***/ })
                    /******/ ])
        });
        //# sourceMappingURL=axios.map
    });

    var CancelToken = axios.CancelToken; // 取消重复请求缓存数据

    var pending = [];
    /**
     * 生成扩展参数方法
     * @param {Object} config 扩展参数
     * @property {Object} headers 表头
     * @property {Boolean} hasLoading 是否需要loading
     * @property {String[]} ignoreLoadingMethods 忽略loading的方法数组
     * @property {Function} startLoading 开始loading方法,参数为config
     * @property {Function} endLoading 结束loading方法,参数config
     * @property {Function} extraRequestMethod 额外的处理方法,用于请求拦截器 可用于根据methods来添加不同的请求头
     * @property {Function} extraResponseMethod 额外的处理方法,用于响应拦截器
     * @property {String[]} cancelApiList 取消api的列表
     * @property {String} redirectUrl 重定向
     */

    function ExtendConfig(config) {
        this.headers = config.headers;
        this.redirectUrl = config.redirectUrl;
        this.hasLoading = TypeUtil.isDefined(config.hasLoading) ? config.hasLoading : true;
        this.ignoreLoadingMethods = ValidateUtil.isNotEmptyKeys(config, ['ignoreLoadingMethods']) ? config.ignoreLoadingMethods : ['get', 'options']; // TODO 自定义loading方法设置为默认值

        TypeUtil.isFunction(config.startLoading) && (this.startLoading = config.startLoading);
        TypeUtil.isFunction(config.endLoading) && (this.endLoading = config.endLoading);
        TypeUtil.isFunction(config.extraRequestMethod) && (this.extraRequestMethod = config.extraRequestMethod);
        TypeUtil.isFunction(config.extraResponseMethod) && (this.extraResponseMethod = config.extraResponseMethod);
        this.cancelApiList = ValidateUtil.notEmptyList(config.cancelApiList) ? config.cancelApiList : [];
    }
    /**
     * 取消请求
     * @param {*} config 配置参数
     * @param {*} cancelApiList 取消请求的url地址
     */


    function removePending(config, cancelApiList) {
        for (var p in pending) {
            var _context;

            if (pending[p].u === concat(_context = "".concat(config.url, "&")).call(_context, config.method) && cancelApiList) {
                if (some(cancelApiList).call(cancelApiList, function (v) {
                    return indexOf(v).call(v, config.url) !== -1;
                })) {
                    pending[p].f();

                    splice(pending).call(pending, p, 1);
                }
            }
        }
    }
    /**
     * 切换Loading
     * @param {*} config 配置
     * @param {*} extConfig 传入配置
     * @param {*} type 1 开启 2关闭
     */


    function changeLoading(config, extConfig, type) {
        var _context2;

        if (extConfig.hasLoading && !includes(_context2 = extConfig.ignoreLoadingMethods).call(_context2, config.method)) {
            if (type === 1) {
                TypeUtil.isFunction(extConfig.startLoading) && extConfig.startLoading(config);
            } else {
                TypeUtil.isFunction(extConfig.endLoading) && extConfig.endLoading(config);
            }
        }
    }

    var ServiceUtil = /*#__PURE__*/function () {
        function ServiceUtil() {
            _classCallCheck(this, ServiceUtil);
        }

        _createClass(ServiceUtil, null, [{
            key: "AxiosCreator",
            value:
                /**
                 * axios 请求构造器
                 * @param {*} config 配置参数详见 https://www.kancloud.cn/yunye/axios/234845
                 * @return {Axios} 实例对象
                 */
                function AxiosCreator(config) {
                    var aKeys = ['url', 'method', 'baseURL', 'transformRequest', 'transformResponse', 'headers', 'params', 'paramsSerializer', 'data', 'timeout', 'withCredentials', 'adapter', 'auth', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'proxy', 'cancelToken'];
                    var cfg = {};

                    forEach(aKeys).call(aKeys, function (k) {
                        ValidateUtil.isNotEmpty(config[k]) && (cfg[k] = config[k]);
                    }); //  创建axios实例


                    return axios.create(cfg);
                }
            /**
             * axios 扩展base拦截器
             * 项目单独配置,此方法值提供base版本
             * @param {*} service
             * @param {Object} extConfig
             */

        }, {
            key: "extendInterceptors",
            value: function extendInterceptors(service, extendConfig) {
                var extConfig = new ExtendConfig(extendConfig); // 请求拦截器

                service.interceptors.request.use(function (config) {
                    // 请求头
                    ValidateUtil.isNotEmpty(extConfig.headers) && (config.headers = extConfig.headers); // 加载loading

                    changeLoading(config, extConfig, 1); // 特殊逻辑处理

                    extConfig.extraRequestMethod && extConfig.extraRequestMethod(config); // 取消重复请求

                    ValidateUtil.notEmptyList(extConfig.cancelApiList) && removePending(config, extConfig.cancelApiList);
                    config.cancelToken = new CancelToken(function (c) {
                        var _context3;

                        pending.push({
                            u: concat(_context3 = "".concat(config.url, "&")).call(_context3, config.method),
                            f: c
                        });
                    });
                    return config;
                }, function (err) {
                    // 加载loading
                    changeLoading(err.config, extConfig, 2);
                    return promise.reject(err);
                }); // http response 拦截器

                service.interceptors.response.use(function (res) {
                    // 取消重复请求
                    removePending(res.config);
                    extConfig.extraResponseMethod && extConfig.extraResponseMethod(res);
                    changeLoading(res.config, extConfig, 2);
                    return res.data;
                }, function (error) {
                    changeLoading(error.config, extConfig, 2);

                    if (ValidateUtil.isNotEmptyKeys(error, ['response', 'status']) && error.response.status === 401 && extConfig.redirectUrl) {
                        window.location.href = extConfig.redirectUrl;
                    }

                    if (error.response && error.response.data) {
                        return error.response.data;
                    } else {
                        promise.reject(error);
                    }

                    return error;
                });
            }
        }]);

        return ServiceUtil;
    }();

    var $map = arrayIteration.map;


    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    // with adding support of @@species
    _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        map: function map(callbackfn /* , thisArg */) {
            return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var map$2 = entryVirtual('Array').map;

    var ArrayPrototype = Array.prototype;

    var map_1 = function (it) {
        var own = it.map;
        return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.map) ? map$2 : own;
    };

    var map$1 = map_1;

    var map = map$1;

    var jsFileNameReg = /^\.\/([^\s]+)\.js$/; // const tsFileNameReg = /^\.\/([^\s]+)\.ts$/;
    // const lessFileNameReg = /^\.\/([^\s]+)\.less$/;
    // const cssFileNameReg = /^\.\/([^\s]+)\.css$/;

    var AutoImportUtil = /*#__PURE__*/function () {
        function AutoImportUtil() {
            _classCallCheck(this, AutoImportUtil);
        }

        _createClass(AutoImportUtil, null, [{
            key: "Components",
            value: function Components(filedir) {
                var _context;

                var requireComponent = require.context( // 其组件目录的相对路径
                    "".concat(filedir, "/components"), // 是否查询其子目录
                    false, // 匹配基础组件文件名的正则表达式
                    /\w+\.vue$/);

                forEach(_context = keys(requireComponent).call(requireComponent)).call(_context, function (fileName) {
                    // 获取组件的 PascalCase 命名
                    StringUtil.upperFirst(StringUtil.toUpperCase( // 获取和目录深度无关的文件名
                        fileName.split('/').pop().replace(/\.\w+$/, '')));
                });
            }
            /**
             * 自动引入 js 模块
             * @param modulesContext 路径
             */

        }, {
            key: "importAll",
            value: function importAll(modulesContext) {
                var _context2;

                return map(_context2 = keys(modulesContext).call(modulesContext)).call(_context2, function (modulesPath) {
                    var moduleName = modulesPath.match(jsFileNameReg);
                    return {
                        moduleName: moduleName,
                        camelModuleName: moduleName[1].replace(/-(\w)/g, function (_, c) {
                            return c ? c.toUpperCase() : '';
                        }),
                        module: modulesContext(modulesPath)["default"]
                    };
                });
            }
        }]);

        return AutoImportUtil;
    }();

    exports.AutoImportUtil = AutoImportUtil;
    exports.CookieUtil = CookieUtil;
    exports.CopyPropertyUtil = CopyPropertyUtil;
    exports.DomUtil = DomUtil;
    exports.Enum = Enum;
    exports.FormControl = FormControl;
    exports.ListUtil = ListUtil;
    exports.LoadUtil = LoadUtil;
    exports.LsUtil = LsUtil;
    exports.ObjectUtil = ObjectUtil;
    exports.ServiceUtil = ServiceUtil;
    exports.StringUtil = StringUtil;
    exports.TypeUtil = TypeUtil;
    exports.UrlUtil = UrlUtil;
    exports.ValidateUtil = ValidateUtil;
    exports.Watermark = Watermark;
    exports.debounce = debounce;
    exports.openConfirm = openConfirm;
    exports.throttle = throttle;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
